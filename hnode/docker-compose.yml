version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: hnode_postgres
    environment:
      POSTGRES_DB: hrepo_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d hrepo_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hnode_network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: hnode_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hnode_network

  # Node.js应用
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hnode_app
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
      - HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=hrepo_db
      - DB_USER=user
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./src:/app/src                    # 挂载源代码（开发模式）
      - ./views:/app/views                # 挂载视图文件（开发模式）
      - ./public:/app/public              # 挂载静态文件（开发模式）
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - hnode_network
    command: sh -c "sleep 3 && node src/app.js"

volumes:
  postgres_data:
  redis_data:

networks:
  hnode_network:
    driver: bridge
