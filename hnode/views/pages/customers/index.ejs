<!-- 页面标题和面包屑 -->
<div class="row mb-4">
  <div class="col-12">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/dashboard">控制台</a></li>
        <li class="breadcrumb-item active">客户管理</li>
      </ol>
    </nav>
    <h1 class="page-title">客户管理</h1>
  </div>
</div>

<!-- 搜索区域 -->
<div class="card mb-4">
  <div class="card-body">
    <div class="row g-3 align-items-center">
      <div class="col-lg-9 col-md-8">
        <div class="input-group">
          <span class="input-group-text">
            <i class="bi bi-search"></i>
          </span>
          <input type="text" class="form-control" id="searchKeyword" placeholder="搜索客户姓名、邮箱或公司名称...">
        </div>
      </div>
      <div class="col-lg-3 col-md-4">
        <button class="btn btn-primary w-100" data-bs-toggle="modal" data-bs-target="#addCustomerModal">
          <i class="bi bi-plus-lg me-1"></i>新增客户
        </button>
      </div>
    </div>
  </div>
</div>

<!-- 客户列表 -->
<div class="card">
  <div class="card-body p-0">
    <div class="table-responsive">
      <table class="table table-hover mb-0">
        <thead class="table-light">
          <tr>
            <th>姓名</th>
            <th>邮箱地址</th>
            <th>公司</th>
            <th>往来邮件次数</th>
            <th>沟通进度</th>
            <th>客户兴趣度</th>
            <th>最近沟通时间</th>
            <th>当前进度</th>
            <th width="100">操作</th>
          </tr>
        </thead>
        <tbody id="customerTableBody">
          <tr>
            <td colspan="9" class="text-center p-5">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">加载中...</span>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
  <div class="card-footer">
    <div class="row align-items-center">
      <div class="col-md-6">
        <div class="d-flex align-items-center gap-2">
          <span>每页显示</span>
          <select class="form-select form-select-sm" style="width: auto;" id="pageSizeSelect" onchange="changePageSize()">
            <option value="10">10</option>
            <option value="20" selected>20</option>
            <option value="50">50</option>
          </select>
          <span>条</span>
        </div>
      </div>
      <div class="col-md-6">
        <div class="d-flex justify-content-between align-items-center">
          <span id="customerCount">显示1-4条,共4条</span>
          <nav>
            <ul class="pagination pagination-sm mb-0" id="pagination"></ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 客户详情抽屉 -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="customerDetailDrawer" aria-labelledby="customerDetailDrawerLabel">
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="customerDetailDrawerLabel">客户详情</h5>
    <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
  </div>
  <div class="offcanvas-body">
    <div id="customerDetailContent">
      <!-- 客户详情内容将通过JavaScript动态加载 -->
    </div>
  </div>
</div>

<!-- 添加客户模态框 -->
<div class="modal fade" id="addCustomerModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">添加客户</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="addCustomerForm">
          <div class="mb-3">
            <label class="form-label">姓名 *</label>
            <input type="text" class="form-control" name="name" required>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label">名字</label>
              <input type="text" class="form-control" name="first_name">
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label">姓氏</label>
              <input type="text" class="form-control" name="last_name">
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">邮箱 *</label>
            <input type="email" class="form-control" name="email" required>
          </div>
          <div class="mb-3">
            <label class="form-label">公司 *</label>
            <input type="text" class="form-control" name="company" required>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
        <button type="button" class="btn btn-primary" onclick="addCustomer()">添加</button>
      </div>
    </div>
  </div>
</div>

<!-- 客户详情模态框 -->
<div class="modal fade" id="customerDetailModal" tabindex="-1">
  <div class="modal-dialog modal-xl modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">客户详情</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body" id="customerDetailBody">
        <!-- 客户详情内容将通过JavaScript动态加载 -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
        <button type="button" class="btn btn-info" id="reanalyzeBtn" onclick="reanalyzeCustomer()">
          <i class="bi bi-robot"></i> 重新AI分析
        </button>
        <button type="button" class="btn btn-primary" id="editCustomerBtn" onclick="editCustomerFromDetail()">
          <i class="bi bi-pencil"></i> 编辑客户
        </button>
      </div>
    </div>
  </div>
</div>

<!-- 编辑客户模态框 -->
<div class="modal fade" id="editCustomerModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">编辑客户</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="editCustomerForm">
          <input type="hidden" id="editCustomerId">
          
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label">姓名 *</label>
              <input type="text" class="form-control" id="editCustomerName" required>
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label">邮箱 *</label>
              <input type="email" class="form-control" id="editCustomerEmail" required>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label">名字</label>
              <input type="text" class="form-control" id="editCustomerFirstName">
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label">姓氏</label>
              <input type="text" class="form-control" id="editCustomerLastName">
            </div>
          </div>
          
          <div class="mb-3">
            <label class="form-label">公司 *</label>
            <input type="text" class="form-control" id="editCustomerCompany" required>
          </div>
          
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label">国家</label>
              <input type="text" class="form-control" id="editCustomerCountry">
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label">城市</label>
              <input type="text" class="form-control" id="editCustomerCity">
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label">沟通进度</label>
              <select class="form-select" id="editCustomerProgress">
                <option value="待联系">待联系</option>
                <option value="跟进中">跟进中</option>
                <option value="不再跟进">不再跟进</option>
                <option value="暂停跟进">暂停跟进</option>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label">兴趣度</label>
              <select class="form-select" id="editCustomerInterest">
                <option value="无兴趣">无兴趣</option>
                <option value="低兴趣">低兴趣</option>
                <option value="中等兴趣">中等兴趣</option>
                <option value="高兴趣">高兴趣</option>
              </select>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
        <button type="button" class="btn btn-primary" onclick="saveCustomerEdit()">
          <i class="bi bi-check"></i> 保存
        </button>
      </div>
    </div>
  </div>
</div>

<script>
let currentPage = 1;
let currentFilters = {};
let pageSize = 20;
let currentMeetingDataInCustomer = null; // 保存当前会议的完整数据（客户详情中）

document.addEventListener('DOMContentLoaded', async function() {
  console.log('✅ 客户页面已加载');
  await loadCustomers();
  
  const searchInput = document.getElementById('searchKeyword');
  if (searchInput) {
    searchInput.addEventListener('input', debounce(searchCustomers, 500));
  }
  
  const pageSizeSelect = document.getElementById('pageSizeSelect');
  if (pageSizeSelect) {
    pageSizeSelect.addEventListener('change', changePageSize);
  }
});

async function loadCustomers(page = 1) {
  try {
    console.log('🔄 加载客户列表，页码:', page);
    
    const token = localStorage.getItem('authToken');
    if (!token) {
      showWarning('请先登录');
      window.location.href = '/login';
      return;
    }
    
    // 构建查询参数
    let queryParams = `page=${page}&pageSize=${pageSize}`;
    if (currentFilters.search) {
      queryParams += `&search=${encodeURIComponent(currentFilters.search)}`;
    }
    
    const url = `/api/customers/?${queryParams}`;
    console.log('📍 请求URL:', url);
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    console.log('📥 客户数据:', data);
    
    if (!data.success) {
      showError('加载客户失败: ' + (data.message || '未知错误'));
      return;
    }
    
    currentPage = page;
    renderCustomerTable(data.customers || []);
    renderPagination(data.page, data.total_pages);
    updateCustomerCount(data.total, data.customers?.length || 0, page);
    
  } catch (error) {
    console.error('❌ 加载客户列表失败:', error);
    showError('加载客户列表失败: ' + error.message);
  }
}

function renderCustomerTable(customers) {
  const tbody = document.getElementById('customerTableBody');
  if (!tbody) {
    console.error('❌ 找不到客户表格');
    return;
  }
  
  console.log('🔄 渲染客户表格，共', customers.length, '条');
  
  if (customers.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="9" class="text-center p-5">
          <div class="empty-state">
            <i class="bi bi-people"></i>
            <h5>暂无客户</h5>
            <p>开始添加您的第一个客户</p>
          </div>
        </td>
      </tr>
    `;
    return;
  }
  
  let html = '';
  customers.forEach(customer => {
    const progressBadge = getProgressBadge(customer.communication_progress);
    const interestBadge = getInterestBadge(customer.interest_level);
    
    html += `
      <tr class="customer-row" data-customer-id="${customer.id}">
        <td>
          <a href="#" class="text-primary fw-bold" onclick="viewCustomerDetail(${customer.id})">
            ${customer.name}
          </a>
        </td>
        <td>${customer.email}</td>
        <td>${customer.company || '-'}</td>
        <td>${customer.email_count || 0}</td>
        <td>${progressBadge}</td>
        <td>
          <div class="dropdown">
            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
              ${interestBadge}
            </button>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" href="#" onclick="updateInterestLevel(${customer.id}, '无兴趣')">无兴趣</a></li>
              <li><a class="dropdown-item" href="#" onclick="updateInterestLevel(${customer.id}, '低兴趣')">低兴趣</a></li>
              <li><a class="dropdown-item" href="#" onclick="updateInterestLevel(${customer.id}, '中等兴趣')">中等兴趣</a></li>
              <li><a class="dropdown-item" href="#" onclick="updateInterestLevel(${customer.id}, '高兴趣')">高兴趣</a></li>
            </ul>
          </div>
        </td>
        <td>${customer.last_communication_time ? formatDate(customer.last_communication_time) : '-'}</td>
        <td class="text-truncate" style="max-width: 200px;" title="${customer.current_progress || ''}">
          ${customer.current_progress || '-'}
        </td>
        <td>
          <div class="dropdown">
            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
              <i class="bi bi-three-dots-vertical"></i>
            </button>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" href="#" onclick="viewCustomerDetail(${customer.id})">
                <i class="bi bi-eye"></i> 查看详情
              </a></li>
              <li><a class="dropdown-item" href="#" onclick="editCustomer(${customer.id})">
                <i class="bi bi-pencil"></i> 编辑
              </a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item text-danger" href="#" onclick="deleteCustomer(${customer.id})">
                <i class="bi bi-trash"></i> 删除
              </a></li>
            </ul>
          </div>
        </td>
      </tr>
    `;
  });
  
  tbody.innerHTML = html;
  console.log('✅ 客户表格渲染完成');
}

function renderPagination(current, total) {
  const pagination = document.getElementById('pagination');
  if (!pagination) return;
  
  if (total <= 1) {
    pagination.innerHTML = '';
    return;
  }
  
  let html = '';
  
  // 上一页
  html += `
    <li class="page-item ${current === 1 ? 'disabled' : ''}">
      <a class="page-link" href="#" onclick="loadCustomers(${current - 1}); return false;">
        <i class="bi bi-chevron-left"></i>
      </a>
    </li>
  `;
  
  // 页码
  const startPage = Math.max(1, current - 2);
  const endPage = Math.min(total, current + 2);
  
  if (startPage > 1) {
    html += `<li class="page-item"><a class="page-link" href="#" onclick="loadCustomers(1); return false;">1</a></li>`;
    if (startPage > 2) {
      html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
    }
  }
  
  for (let i = startPage; i <= endPage; i++) {
    html += `
      <li class="page-item ${i === current ? 'active' : ''}">
        <a class="page-link" href="#" onclick="loadCustomers(${i}); return false;">${i}</a>
      </li>
    `;
  }
  
  if (endPage < total) {
    if (endPage < total - 1) {
      html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
    }
    html += `<li class="page-item"><a class="page-link" href="#" onclick="loadCustomers(${total}); return false;">${total}</a></li>`;
  }
  
  // 下一页
  html += `
    <li class="page-item ${current === total ? 'disabled' : ''}">
      <a class="page-link" href="#" onclick="loadCustomers(${current + 1}); return false;">
        <i class="bi bi-chevron-right"></i>
      </a>
    </li>
  `;
  
  pagination.innerHTML = html;
}

function updateCustomerCount(total, current, page) {
  const start = (page - 1) * pageSize + 1;
  const end = Math.min(page * pageSize, total);
  const countElement = document.getElementById('customerCount');
  if (countElement) {
    countElement.textContent = `显示${start}-${end}条,共${total}条`;
  }
}

function searchCustomers() {
  currentFilters = {};
  
  const searchInput = document.getElementById('searchKeyword');
  const keyword = searchInput ? searchInput.value : '';
  if (keyword) currentFilters.search = keyword;
  
  loadCustomers(1);
}

function changePageSize() {
  const pageSizeSelect = document.getElementById('pageSizeSelect');
  pageSize = pageSizeSelect ? parseInt(pageSizeSelect.value) : 20;
  loadCustomers(1);
}

// 客户详情功能（优化版：先显示页面，后台加载AI分析）
async function viewCustomerDetail(customerId) {
  console.log('✅ 查看客户详情:', customerId);
  
  // 防止短时间内重复点击
  if (window.isLoadingCustomerDetail) {
    console.log('⚠️ 正在加载客户详情，请稍候...');
    return;
  }
  
  window.isLoadingCustomerDetail = true;
  
  try {
    const token = localStorage.getItem('authToken');
    
    // 1. 先获取客户基本信息、邮件记录和会议记录
    const [customerResponse, emailResponse, meetingResponse] = await Promise.all([
      fetch(`/api/customers/${customerId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }),
      fetch(`/api/email-history/?customer_id=${customerId}&pageSize=10`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }),
      fetch(`/api/zoom-meetings/?customer_id=${customerId}&pageSize=10`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
    ]);
    
    const customerData = await customerResponse.json();
    const emailData = await emailResponse.json();
    const meetingData = await meetingResponse.json();
    
    if (!customerData.success) {
      showError('获取客户信息失败');
      window.isLoadingCustomerDetail = false;
      return;
    }
    
    const customer = customerData.customer;
    const emails = emailData.email_history || [];
    const meetings = meetingData.meetings || [];
    
    // 保存当前客户数据
    window.currentCustomer = customer;
    
    // 2. 先尝试获取已有的分析数据
    console.log('🔍 获取已有分析数据...');
    const cachedAnalysisResponse = await fetch(`/api/customer-analysis/${customerId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    const cachedAnalysisData = await cachedAnalysisResponse.json();
    
    // 3. 使用已有数据或空数据渲染页面（立即显示）
    const initialAnalysis = cachedAnalysisData.success ? cachedAnalysisData.analysis : null;
    const needsAnalysis = !cachedAnalysisData.success || !cachedAnalysisData.analysis;
    
    renderCustomerDetailModal(customer, initialAnalysis, emails, meetings, needsAnalysis);
    
    // 4. 显示模态框
    const modal = new bootstrap.Modal(document.getElementById('customerDetailModal'));
    modal.show();
    
    // 5. 如果需要分析，禁用按钮并在后台加载
    if (needsAnalysis) {
      console.log('🤖 后台触发AI客户分析...');
      
      // 禁用按钮
      disableAnalysisButtons();
      
      // 异步执行，不阻塞页面显示
      loadAIAnalysis(customerId, customer, emails, meetings);
    } else {
      console.log('✅ 使用已有分析数据');
    }
    
  } catch (error) {
    console.error('❌ 加载客户详情失败:', error);
    showError('加载客户详情失败: ' + error.message);
  } finally {
    window.isLoadingCustomerDetail = false;
  }
}

// 后台加载AI分析
async function loadAIAnalysis(customerId, customer, emails, meetings) {
  try {
    const token = localStorage.getItem('authToken');
    
    const analyzeResponse = await fetch(`/api/customer-analysis/${customerId}/analyze`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const analyzeData = await analyzeResponse.json();
    
    if (analyzeData.success) {
      console.log('✅ AI分析完成，更新页面');
      // 更新页面显示（不重新加载整个模态框）
      renderCustomerDetailModal(customer, analyzeData.analysis, emails, meetings, false);
      // 启用按钮
      enableAnalysisButtons();
    } else {
      console.log('⚠️ AI分析失败:', analyzeData.message);
      // 显示分析失败的提示
      const analysisSection = document.querySelector('.ai-analysis-section');
      if (analysisSection) {
        analysisSection.innerHTML = `
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h6 class="text-muted mb-0">AI 智能分析</h6>
          </div>
          <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i> AI分析失败: ${analyzeData.message}
            <button class="btn btn-sm btn-outline-primary ms-2" onclick="reanalyzeCustomer()">重试</button>
          </div>
        `;
      }
      // 启用按钮
      enableAnalysisButtons();
    }
  } catch (error) {
    console.error('❌ AI分析失败:', error);
    const analysisSection = document.querySelector('.ai-analysis-section');
    if (analysisSection) {
      analysisSection.innerHTML = `
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h6 class="text-muted mb-0">AI 智能分析</h6>
        </div>
        <div class="alert alert-danger">
          <i class="bi bi-x-circle"></i> AI分析失败: ${error.message}
          <button class="btn btn-sm btn-outline-primary ms-2" onclick="reanalyzeCustomer()">重试</button>
        </div>
      `;
    }
    // 启用按钮
    enableAnalysisButtons();
  }
}

// 禁用分析相关按钮
function disableAnalysisButtons() {
  const reanalyzeBtn = document.getElementById('reanalyzeBtn');
  const editCustomerBtn = document.getElementById('editCustomerBtn');
  
  if (reanalyzeBtn) {
    reanalyzeBtn.disabled = true;
    reanalyzeBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span> AI分析中...';
  }
  
  if (editCustomerBtn) {
    editCustomerBtn.disabled = true;
  }
}

// 启用分析相关按钮
function enableAnalysisButtons() {
  const reanalyzeBtn = document.getElementById('reanalyzeBtn');
  const editCustomerBtn = document.getElementById('editCustomerBtn');
  
  if (reanalyzeBtn) {
    reanalyzeBtn.disabled = false;
    reanalyzeBtn.innerHTML = '<i class="bi bi-robot"></i> 重新AI分析';
  }
  
  if (editCustomerBtn) {
    editCustomerBtn.disabled = false;
  }
}

// 会议状态徽章
function getStatusBadgeForMeeting(status) {
  const badges = {
    'pending': '<span class="badge bg-info"><i class="bi bi-hourglass-split"></i> 等待处理</span>',
    'processing': '<span class="badge bg-warning"><i class="bi bi-gear"></i> 处理中</span>',
    'transcribing': '<span class="badge bg-primary"><i class="bi bi-mic"></i> 识别中</span>',
    'summarizing': '<span class="badge bg-info"><i class="bi bi-robot"></i> 生成中</span>',
    'completed': '<span class="badge bg-success"><i class="bi bi-check-circle"></i> 已完成</span>',
    'failed': '<span class="badge bg-danger"><i class="bi bi-x-circle"></i> 失败</span>'
  };
  return badges[status] || `<span class="badge bg-secondary">${status || '未知'}</span>`;
}

// 去除Markdown格式，提取纯文本
function stripMarkdown(text) {
  if (!text) return '';
  
  return text
    .replace(/#{1,6}\s+/g, '')      // 移除标题标记 ##
    .replace(/\*\*(.+?)\*\*/g, '$1') // 移除粗体 **text**
    .replace(/\*(.+?)\*/g, '$1')     // 移除斜体 *text*
    .replace(/\[(.+?)\]\(.+?\)/g, '$1') // 移除链接 [text](url)
    .replace(/`(.+?)`/g, '$1')       // 移除代码标记 `code`
    .replace(/^[\s-*]\s+/gm, '')     // 移除列表标记
    .replace(/\n{3,}/g, '\n\n')      // 多个换行合并为两个
    .trim();
}

// 安全解析数组数据（处理可能是字符串或对象的情况）
function parseArrayField(field, fieldName = 'unknown') {
  console.log(`🔍 解析字段 ${fieldName}:`, field, 'Type:', typeof field);
  
  if (!field) {
    console.log(`  → 空值，返回 []`);
    return [];
  }
  
  if (Array.isArray(field)) {
    console.log(`  → 已是数组，长度: ${field.length}`);
    return field;
  }
  
  if (typeof field === 'string') {
    try {
      const parsed = JSON.parse(field);
      console.log(`  → 解析JSON字符串:`, parsed);
      return Array.isArray(parsed) ? parsed : [parsed];
    } catch (e) {
      console.log(`  → JSON解析失败，当作普通字符串`);
      return [field];
    }
  }
  
  if (typeof field === 'object') {
    const values = Object.values(field);
    console.log(`  → 对象转数组:`, values);
    return values;
  }
  
  console.log(`  → 未知类型，返回 []`);
  return [];
}

function renderCustomerDetailModal(customer, analysis, emails, meetings = [], isLoading = false) {
  // 解析分析数据中的数组字段
  let opportunities = [];
  let risks = [];
  let strategicSuggestions = [];
  let nextActions = [];
  
  if (analysis) {
    opportunities = parseArrayField(analysis.opportunities, 'opportunities');
    risks = parseArrayField(analysis.risks, 'risks');
    strategicSuggestions = parseArrayField(analysis.strategic_suggestions, 'strategic_suggestions');
    nextActions = parseArrayField(analysis.next_actions, 'next_actions');
  }
  
  // 预处理会议数据，添加摘要预览
  console.log('🎥 会议数据:', meetings);
  const processedMeetings = (meetings || []).map(meeting => {
    let summaryPreview = '';
    console.log(`🔍 处理会议 ${meeting.id}:`, {
      has_ai_summary: !!meeting.ai_summary,
      ai_summary_length: meeting.ai_summary ? meeting.ai_summary.length : 0,
      ai_summary_preview: meeting.ai_summary ? meeting.ai_summary.substring(0, 50) : 'null'
    });
    
    if (meeting.ai_summary) {
      const plainText = stripMarkdown(meeting.ai_summary);
      console.log(`  → stripMarkdown后:`, plainText.substring(0, 100));
      summaryPreview = plainText.substring(0, 80) + (plainText.length > 80 ? '...' : '');
    }
    
    console.log(`  → summaryPreview:`, summaryPreview);
    return {
      ...meeting,
      summaryPreview
    };
  });
  
  const html = `
    <div class="customer-detail">
      <!-- 基本信息 -->
      <div class="mb-4">
        <h6 class="text-muted mb-2">基本信息</h6>
        <div class="row">
          <div class="col-6">
            <strong>姓名:</strong> ${customer.name}
          </div>
          <div class="col-6">
            <strong>邮箱:</strong> ${customer.email}
          </div>
        </div>
      </div>
      
      <!-- AI智能分析 -->
      <div class="mb-4 ai-analysis-section">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h6 class="text-muted mb-0">AI 智能分析</h6>
          ${isLoading ? `
            <div class="spinner-border spinner-border-sm text-primary" role="status">
              <span class="visually-hidden">加载中...</span>
            </div>
          ` : ''}
        </div>
        
        ${analysis ? `
          <!-- 当前沟通进度 -->
          <div class="card mb-3">
            <div class="card-body">
              <div class="d-flex align-items-center mb-2">
                <i class="bi bi-chat-dots text-primary me-2"></i>
                <strong>当前沟通进度</strong>
              </div>
              <p class="mb-0">${analysis.current_progress || '暂无分析数据'}</p>
            </div>
          </div>
          
          <!-- 机会点与风险预警 -->
          <div class="card mb-3">
            <div class="card-body">
              <div class="d-flex align-items-center mb-2">
                <i class="bi bi-exclamation-triangle text-warning me-2"></i>
                <strong>机会点与风险预警</strong>
              </div>
              <div class="row">
                <div class="col-6">
                  <h6 class="text-success">机会点</h6>
                  <ul class="list-unstyled">
                    ${opportunities.length > 0 
                      ? opportunities.map(opp => {
                          if (typeof opp === 'object' && opp.title) {
                            const priority = opp.priority || '';
                            let priorityBadge = '';
                            
                            if (priority === '高') {
                              priorityBadge = `<span class="badge bg-success">高</span>`;
                            } else if (priority === '中') {
                              priorityBadge = `<span class="badge bg-info">中</span>`;
                            } else if (priority === '低') {
                              priorityBadge = `<span class="badge bg-secondary">低</span>`;
                            } else if (priority) {
                              priorityBadge = `<span class="badge bg-primary">${priority}</span>`;
                            }
                            
                            return `<li class="mb-3">
                              <strong>• ${opp.title}</strong> ${priorityBadge}
                              <br><small class="text-muted">${opp.description || ''}</small>
                            </li>`;
                          }
                          return `<li>• ${opp}</li>`;
                        }).join('') 
                      : '<li class="text-muted">暂无数据</li>'}
                  </ul>
                </div>
                <div class="col-6">
                  <h6 class="text-danger">风险点</h6>
                  <ul class="list-unstyled">
                    ${risks.length > 0 
                      ? risks.map(risk => {
                          if (typeof risk === 'object' && risk.title) {
                            return `<li><strong>• ${risk.title}</strong>${risk.severity ? ` <span class="badge bg-danger">${risk.severity}</span>` : ''}<br><small class="text-muted">${risk.description || ''}</small></li>`;
                          }
                          return `<li>• ${risk}</li>`;
                        }).join('') 
                      : '<li class="text-muted">暂无数据</li>'}
                  </ul>
                </div>
              </div>
            </div>
          </div>
          
          <!-- 战略建议 -->
          <div class="card mb-3">
            <div class="card-body">
              <div class="d-flex align-items-center mb-2">
                <i class="bi bi-lightbulb text-info me-2"></i>
                <strong>战略建议</strong>
              </div>
              <ul class="list-unstyled">
                ${strategicSuggestions.length > 0 
                  ? strategicSuggestions.map(rec => {
                      if (typeof rec === 'object' && rec.title) {
                        return `<li class="mb-3"><strong>• ${rec.title}</strong><br><small class="text-muted">${rec.description || ''}</small>${rec.expected_outcome ? `<br><small class="text-success"><i class="bi bi-check-circle"></i> 预期结果: ${rec.expected_outcome}</small>` : ''}</li>`;
                      }
                      return `<li>• ${rec}</li>`;
                    }).join('') 
                  : '<li class="text-muted">暂无数据</li>'}
              </ul>
            </div>
          </div>
          
          <!-- 下一步行动建议 -->
          <div class="card mb-3">
            <div class="card-body">
              <div class="d-flex align-items-center mb-2">
                <i class="bi bi-list-check text-success me-2"></i>
                <strong>下一步行动建议</strong>
              </div>
              <ul class="list-unstyled">
                ${nextActions.length > 0 
                  ? nextActions.map((step, idx) => {
                      if (typeof step === 'object') {
                        // 字段名称：action, deadline, priority
                        const action = step.action || step.title || step.name || '行动项';
                        const deadline = step.deadline || '';
                        const priority = step.priority || '';
                        
                        let priorityBadge = '';
                        if (priority === '紧急') {
                          priorityBadge = `<span class="badge bg-danger">${priority}</span>`;
                        } else if (priority === '重要') {
                          priorityBadge = `<span class="badge bg-warning">${priority}</span>`;
                        } else if (priority === '一般') {
                          priorityBadge = `<span class="badge bg-secondary">${priority}</span>`;
                        } else if (priority) {
                          priorityBadge = `<span class="badge bg-info">${priority}</span>`;
                        }
                        
                        return `<li class="mb-2">
                          <strong>• ${action}</strong> ${priorityBadge}
                          ${deadline ? `<br><small class="text-muted"><i class="bi bi-calendar"></i> ${deadline}</small>` : ''}
                        </li>`;
                      }
                      return `<li>• ${step}</li>`;
                    }).join('') 
                  : '<li class="text-muted">暂无数据</li>'}
              </ul>
            </div>
          </div>
        ` : `
          <!-- 无分析数据时的占位符 -->
          <div class="card mb-3">
            <div class="card-body text-center p-5">
              <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">加载中...</span>
              </div>
              <p class="text-muted mb-0">正在进行AI智能分析，请稍候...</p>
              <small class="text-muted">这可能需要20-30秒</small>
            </div>
          </div>
        `}
      </div>
      
      <!-- 往来记录 -->
      <div class="mb-4">
        <ul class="nav nav-tabs" id="communicationTabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="emails-tab" data-bs-toggle="tab" data-bs-target="#emails" type="button" role="tab">
              邮件往来记录
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="meetings-tab" data-bs-toggle="tab" data-bs-target="#meetings" type="button" role="tab">
              视频会议记录
            </button>
          </li>
        </ul>
        <div class="tab-content" id="communicationTabContent">
          <div class="tab-pane fade show active" id="emails" role="tabpanel">
            <div class="mt-3">
              ${renderEmailHistory(emails)}
            </div>
          </div>
          <div class="tab-pane fade" id="meetings" role="tabpanel">
            <div class="mt-3">
              ${processedMeetings && processedMeetings.length > 0 ? `
                <div class="list-group">
                  ${processedMeetings.map(meeting => `
                    <a href="#" class="list-group-item list-group-item-action" onclick="showMeetingDetailInCustomer(${meeting.id}); return false;">
                      <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                          <h6 class="mb-1">${meeting.meeting_title || '未命名会议'}</h6>
                          <p class="mb-1 text-muted small">
                            <i class="bi bi-calendar"></i> ${meeting.meeting_date ? new Date(meeting.meeting_date).toLocaleDateString('zh-CN') : '未知日期'}
                          </p>
                          ${meeting.summaryPreview ? `
                            <p class="mb-0 text-muted small" style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">
                              <i class="bi bi-robot"></i> ${meeting.summaryPreview}
                            </p>
                          ` : `
                            <p class="mb-0 text-muted small">
                              <i class="bi bi-hourglass-split"></i> ${meeting.status === 'completed' ? '暂无摘要' : '处理中...'}
                            </p>
                          `}
                        </div>
                        <div class="text-end">
                          ${getStatusBadgeForMeeting(meeting.status)}
                        </div>
                      </div>
                    </a>
                  `).join('')}
                </div>
              ` : '<p class="text-muted">暂无视频会议记录</p>'}
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
  
  const detailBody = document.getElementById('customerDetailBody');
  if (detailBody) {
    detailBody.innerHTML = html;
  }
  console.log('✅ 客户详情渲染完成');
}

function renderEmailHistory(emails) {
  if (emails.length === 0) {
    return '<p class="text-muted">暂无邮件往来记录</p>';
  }
  
  let html = '<div class="list-group">';
  emails.forEach(email => {
    const preview = (email.content || '').substring(0, 80);
    html += `
      <a href="#" class="list-group-item list-group-item-action" onclick="showEmailDetailInCustomer(${email.id}); return false;">
        <div class="d-flex justify-content-between align-items-start">
          <div class="flex-grow-1">
            <h6 class="mb-1">${email.title || '无主题'}</h6>
            <p class="mb-1 text-muted small">${preview}${preview.length >= 80 ? '...' : ''}</p>
            <small class="text-muted">
              <i class="bi bi-send"></i> ${email.send_address} → ${email.receive_address}
            </small>
          </div>
          <div class="text-end">
            <small class="text-muted">${formatDate(email.send_time)}</small>
            <br>
            <span class="badge ${email.email_type === 'sent' ? 'bg-primary' : 'bg-success'} mt-1">
              ${email.email_type === 'sent' ? '已发送' : '已接收'}
            </span>
          </div>
        </div>
      </a>
    `;
  });
  html += '</div>';
  
  return html;
}

// 在客户详情中查看邮件详情
async function showEmailDetailInCustomer(emailId) {
  try {
    const token = localStorage.getItem('authToken');
    
    const response = await fetch(`/api/email-history/${emailId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (!data.success) {
      showError('获取邮件详情失败');
      return;
    }
    
    const email = data.email_history;
    
    // 创建邮件详情模态框
    const modalHTML = `
      <div class="modal fade" id="emailDetailInCustomerModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title"><i class="bi bi-envelope"></i> 邮件详情</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <div class="mb-3">
                <strong>主题:</strong> ${email.title || '无主题'}
              </div>
              <div class="mb-3">
                <strong>发件人:</strong> ${email.send_address}
              </div>
              <div class="mb-3">
                <strong>收件人:</strong> ${email.receive_address}
              </div>
              <div class="mb-3">
                <strong>发送时间:</strong> ${new Date(email.send_time).toLocaleString('zh-CN')}
              </div>
              <div class="mb-3">
                <strong>类型:</strong> 
                <span class="badge ${email.email_type === 'sent' ? 'bg-primary' : 'bg-success'}">
                  ${email.email_type === 'sent' ? '已发送' : '已接收'}
                </span>
              </div>
              <hr>
              <div class="mb-3">
                <strong>内容:</strong>
                <div class="mt-2 p-3 bg-light rounded" style="white-space: pre-wrap;">
                  ${email.content || '(无内容)'}
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // 移除旧的模态框
    const oldModal = document.getElementById('emailDetailInCustomerModal');
    if (oldModal) oldModal.remove();
    
    // 添加新模态框
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // 显示模态框
    const modal = new bootstrap.Modal(document.getElementById('emailDetailInCustomerModal'));
    modal.show();
    
  } catch (error) {
    console.error('❌ 获取邮件详情失败:', error);
    showError('获取邮件详情失败: ' + error.message);
  }
}

// 在客户详情中查看会议详情
async function showMeetingDetailInCustomer(meetingId) {
  try {
    const token = localStorage.getItem('authToken');
    
    const response = await fetch(`/api/zoom-meetings/${meetingId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (!data.success) {
      showError('获取会议详情失败');
      return;
    }
    
    const meeting = data.meeting;
    
    // 创建会议详情模态框
    const modalHTML = `
      <div class="modal fade" id="meetingDetailInCustomerModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title"><i class="bi bi-camera-video"></i> 会议详情</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <div class="mb-3">
                <strong>会议标题:</strong> ${meeting.meeting_title || '未命名会议'}
              </div>
              <div class="mb-3">
                <strong>会议日期:</strong> ${meeting.meeting_date ? new Date(meeting.meeting_date).toLocaleDateString('zh-CN') : '-'}
              </div>
              <div class="mb-3">
                <strong>视频文件:</strong> ${meeting.video_file_name || '-'}
              </div>
              <div class="mb-3">
                <strong>状态:</strong> ${getStatusBadgeForMeeting(meeting.status)}
              </div>
              
              ${meeting.ai_summary ? `
                <hr>
                <div class="mb-3">
                  <strong><i class="bi bi-robot"></i> AI 会议摘要:</strong>
                  <div class="mt-2 p-3 bg-light rounded markdown-content" id="customerMeetingSummary-${meeting.id}"></div>
                </div>
              ` : `
                <hr>
                <div class="alert alert-info mb-0">
                  <i class="bi bi-info-circle"></i> ${meeting.status === 'completed' ? '暂无AI摘要' : 'AI摘要生成中，请稍后刷新查看'}
                </div>
              `}
              
              ${meeting.transcript_text ? `
                <hr>
                <div class="mb-3">
                  <strong><i class="bi bi-file-text"></i> 会议文字稿:</strong>
                  <div class="mt-2 p-3 bg-light rounded" style="max-height: 300px; overflow-y: auto; white-space: pre-line; line-height: 1.8;">
                    ${meeting.transcript_text}
                  </div>
                </div>
              ` : ''}
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
              <button type="button" class="btn btn-info" onclick="downloadTranscriptInCustomer()">
                <i class="bi bi-file-text"></i> 下载文字稿 (.txt)
              </button>
              <button type="button" class="btn btn-primary" onclick="downloadAISummaryInCustomer()">
                <i class="bi bi-file-earmark-text"></i> 下载AI分析 (.md)
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // 保存当前会议数据
    currentMeetingDataInCustomer = meeting;
    
    // 移除旧的模态框
    const oldModal = document.getElementById('meetingDetailInCustomerModal');
    if (oldModal) oldModal.remove();
    
    // 添加新模态框
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // 渲染Markdown（在DOM插入后）
    if (meeting.ai_summary && typeof marked !== 'undefined') {
      setTimeout(() => {
        const summaryEl = document.getElementById(`customerMeetingSummary-${meeting.id}`);
        if (summaryEl) {
          try {
            summaryEl.innerHTML = marked.parse(meeting.ai_summary);
          } catch (e) {
            console.error('Markdown渲染失败:', e);
            summaryEl.textContent = meeting.ai_summary;
          }
        }
      }, 100);
    }
    
    // 显示模态框
    const modal = new bootstrap.Modal(document.getElementById('meetingDetailInCustomerModal'));
    modal.show();
    
  } catch (error) {
    console.error('❌ 获取会议详情失败:', error);
    showError('获取会议详情失败: ' + error.message);
  }
}

// 更新客户兴趣程度
async function updateInterestLevel(customerId, level) {
  console.log('✅ 更新客户兴趣程度:', customerId, level);
  
  try {
    const token = localStorage.getItem('authToken');
    
    const response = await fetch(`/api/customers/${customerId}/interest-level`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        interest_level: level
      })
    });
    
    const data = await response.json();
    
    if (data.success) {
      showSuccess('客户兴趣程度已更新');
      await loadCustomers(currentPage);
    } else {
      showError('更新失败: ' + data.message);
    }
  } catch (error) {
    console.error('❌ 更新失败:', error);
    showError('更新失败: ' + error.message);
  }
}

// 客户操作
// 编辑客户
async function editCustomer(id) {
  console.log('✅ 编辑客户:', id);
  await viewCustomerForEdit(id);
}

// 从详情页面进入编辑
function editCustomerFromDetail() {
  if (!window.currentCustomer) {
    showError('无法获取客户信息');
    return;
  }
  
  // 关闭详情模态框
  const detailModal = bootstrap.Modal.getInstance(document.getElementById('customerDetailModal'));
  if (detailModal) {
    detailModal.hide();
  }
  
  // 填充编辑表单
  fillCustomerEditForm(window.currentCustomer);
  
  // 显示编辑模态框
  const editModal = new bootstrap.Modal(document.getElementById('editCustomerModal'));
  editModal.show();
}

// 重新AI分析客户
async function reanalyzeCustomer() {
  if (!window.currentCustomer) {
    showError('无法获取客户信息');
    return;
  }
  
  const customerId = window.currentCustomer.id;
  
  if (!confirm('确定要重新进行AI分析吗？\n\n这将使用最新的邮件和会议数据重新生成客户分析报告。')) {
    return;
  }
  
  try {
    console.log('🤖 开始重新AI客户分析...');
    
    // 禁用按钮
    disableAnalysisButtons();
    
    const token = localStorage.getItem('authToken');
    
    // 显示加载状态
    let analysisSectionEl = document.querySelector('.ai-analysis-section');
    if (analysisSectionEl) {
      const loadingHTML = `
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h6 class="text-muted mb-0">AI 智能分析</h6>
          <div class="spinner-border spinner-border-sm text-primary" role="status">
            <span class="visually-hidden">加载中...</span>
          </div>
        </div>
        <div class="card mb-3">
          <div class="card-body text-center p-5">
            <div class="spinner-border text-primary mb-3" role="status">
              <span class="visually-hidden">加载中...</span>
            </div>
            <p class="text-muted mb-0">正在进行AI智能分析，请稍候...</p>
            <small class="text-muted">这可能需要20-30秒</small>
          </div>
        </div>
      `;
      analysisSectionEl.innerHTML = loadingHTML;
    }
    
    // 重新获取邮件和会议数据（可能有新的数据）
    const [emailResponse, meetingResponse] = await Promise.all([
      fetch(`/api/email-history/?customer_id=${customerId}&pageSize=10`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }),
      fetch(`/api/zoom-meetings/?customer_id=${customerId}&pageSize=10`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
    ]);
    
    const emailData = await emailResponse.json();
    const meetingData = await meetingResponse.json();
    const emails = emailData.email_history || [];
    const meetings = meetingData.meetings || [];
    
    const response = await fetch(`/api/customer-analysis/${customerId}/analyze`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (!data.success) {
      showError('AI分析失败: ' + (data.message || '未知错误'));
      enableAnalysisButtons();
      return;
    }
    
    console.log('✅ AI分析完成，更新页面');
    
    // 更新页面显示
    renderCustomerDetailModal(window.currentCustomer, data.analysis, emails, meetings, false);
    
    // 启用按钮
    enableAnalysisButtons();
    
    // 显示成功提示（不使用 alert）
    analysisSectionEl = document.querySelector('.ai-analysis-section');
    if (analysisSectionEl) {
      const successBanner = document.createElement('div');
      successBanner.className = 'alert alert-success alert-dismissible fade show mb-3';
      successBanner.innerHTML = `
        <i class="bi bi-check-circle"></i> AI分析已完成！
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      analysisSectionEl.insertBefore(successBanner, analysisSectionEl.firstChild);
      
      // 3秒后自动关闭
      setTimeout(() => {
        successBanner.remove();
      }, 3000);
    }
    
  } catch (error) {
    console.error('❌ AI分析失败:', error);
    showError('AI分析失败: ' + error.message);
    enableAnalysisButtons();
  }
}

// 获取客户并打开编辑模态框
async function viewCustomerForEdit(id) {
  console.log('✅ 获取客户信息用于编辑:', id);
  
  try {
    const token = localStorage.getItem('authToken');
    
    const response = await fetch(`/api/customers/${id}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.success) {
      fillCustomerEditForm(data.customer);
      
      // 显示编辑模态框
      const modal = new bootstrap.Modal(document.getElementById('editCustomerModal'));
      modal.show();
    } else {
      showError('获取客户信息失败: ' + data.message);
    }
  } catch (error) {
    console.error('❌ 获取客户信息失败:', error);
    showError('获取客户信息失败: ' + error.message);
  }
}

// 填充编辑表单
function fillCustomerEditForm(customer) {
  document.getElementById('editCustomerId').value = customer.id;
  document.getElementById('editCustomerName').value = customer.name || '';
  document.getElementById('editCustomerEmail').value = customer.email || '';
  document.getElementById('editCustomerFirstName').value = customer.first_name || '';
  document.getElementById('editCustomerLastName').value = customer.last_name || '';
  document.getElementById('editCustomerCompany').value = customer.company || '';
  document.getElementById('editCustomerCountry').value = customer.country || '';
  document.getElementById('editCustomerCity').value = customer.city || '';
  document.getElementById('editCustomerProgress').value = customer.communication_progress || '待联系';
  document.getElementById('editCustomerInterest').value = customer.interest_level || '无兴趣';
}

// 保存编辑
async function saveCustomerEdit() {
  console.log('✅ 保存客户编辑');
  
  const id = document.getElementById('editCustomerId').value;
  const name = document.getElementById('editCustomerName').value;
  const email = document.getElementById('editCustomerEmail').value;
  const company = document.getElementById('editCustomerCompany').value;
  
  if (!name || !email || !company) {
    showWarning('请填写姓名、邮箱和公司');
    return;
  }
  
  const customerData = {
    name: name,
    email: email,
    first_name: document.getElementById('editCustomerFirstName').value,
    last_name: document.getElementById('editCustomerLastName').value,
    company: company,
    country: document.getElementById('editCustomerCountry').value,
    city: document.getElementById('editCustomerCity').value,
    communication_progress: document.getElementById('editCustomerProgress').value,
    interest_level: document.getElementById('editCustomerInterest').value
  };
  
  try {
    const token = localStorage.getItem('authToken');
    
    console.log('🔄 更新客户信息...');
    
    const response = await fetch(`/api/customers/${id}`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(customerData)
    });
    
    const data = await response.json();
    console.log('📥 更新响应:', data);
    
    if (data.success) {
      showSuccess('客户信息保存成功！');
      
      // 关闭编辑模态框
      const modal = bootstrap.Modal.getInstance(document.getElementById('editCustomerModal'));
      if (modal) {
        modal.hide();
      }
      
      // 刷新客户列表
      await loadCustomers(currentPage);
    } else {
      showError('保存失败: ' + (data.message || '未知错误'));
    }
  } catch (error) {
    console.error('❌ 保存客户失败:', error);
    showError('保存失败: ' + error.message);
  }
}

async function deleteCustomer(id) {
  if (!confirm('确定要删除这个客户吗？')) return;
  
  console.log('✅ 删除客户:', id);
  
  try {
    const token = localStorage.getItem('authToken');
    
    const response = await fetch(`/api/customers/${id}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.success) {
      showSuccess('客户已删除');
      await loadCustomers(currentPage);
    } else {
      showError('删除失败: ' + data.message);
    }
  } catch (error) {
    console.error('❌ 删除客户失败:', error);
    showError('删除失败: ' + error.message);
  }
}

// 添加客户
async function addCustomer() {
  console.log('✅ 添加新客户');
  
  const formData = {
    name: document.querySelector('input[name="name"]').value,
    first_name: document.querySelector('input[name="first_name"]').value,
    last_name: document.querySelector('input[name="last_name"]').value,
    email: document.querySelector('input[name="email"]').value,
    company: document.querySelector('input[name="company"]').value
  };
  
  if (!formData.name || !formData.email || !formData.company) {
    showWarning('请填写必填项（姓名、邮箱、公司）');
    return;
  }
  
  try {
    showLoading();
    
    const token = localStorage.getItem('authToken');
    
    const response = await fetch('/api/customers/', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    });
    
    const data = await response.json();
    
    if (data.success) {
      showSuccess('客户添加成功！');
      
      const modal = bootstrap.Modal.getInstance(document.getElementById('addCustomerModal'));
      if (modal) {
        modal.hide();
      }
      
      document.getElementById('addCustomerForm').reset();
      await loadCustomers(1);
    } else {
      showError('添加失败: ' + (data.message || '未知错误'));
    }
  } catch (error) {
    console.error('❌ 添加客户失败:', error);
    showError('添加失败: ' + error.message);
  } finally {
    hideLoading();
  }
}

// 工具函数
function getProgressBadge(progress) {
  const badges = {
    '待联系': '<span class="badge bg-secondary">待联系</span>',
    '跟进中': '<span class="badge bg-primary">跟进中</span>',
    '不再跟进': '<span class="badge bg-danger">不再跟进</span>',
    '暂停跟进': '<span class="badge bg-warning">暂停跟进</span>'
  };
  return badges[progress] || '<span class="badge bg-secondary">未知</span>';
}

function getInterestBadge(level) {
  const badges = {
    '无兴趣': '<span class="badge bg-secondary">无兴趣</span>',
    '低兴趣': '<span class="badge bg-warning">低兴趣</span>',
    '中等兴趣': '<span class="badge bg-info">中等兴趣</span>',
    '高兴趣': '<span class="badge bg-success">高兴趣</span>'
  };
  return badges[level] || '<span class="badge bg-secondary">未知</span>';
}

function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('zh-CN');
}

function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

function showLoading() {
  // 显示加载状态
}

function hideLoading() {
  // 隐藏加载状态
}

// 下载文字稿（客户详情中使用）
function downloadTranscriptInCustomer() {
  if (!currentMeetingDataInCustomer || !currentMeetingDataInCustomer.transcript_text) {
    showWarning('暂无文字稿内容');
    return;
  }
  
  const meeting = currentMeetingDataInCustomer;
  const fileName = `${meeting.meeting_title || '会议'}_文字稿_${new Date().toISOString().split('T')[0]}.txt`;
  
  // 构建文字稿内容
  let content = `会议文字稿\n`;
  content += `=====================================\n\n`;
  content += `会议标题: ${meeting.meeting_title || '未命名会议'}\n`;
  content += `会议日期: ${meeting.meeting_date ? new Date(meeting.meeting_date).toLocaleDateString('zh-CN') : '-'}\n`;
  if (meeting.customer) {
    content += `关联客户: ${meeting.customer.name} (${meeting.customer.company})\n`;
  }
  content += `生成时间: ${new Date().toLocaleString('zh-CN')}\n`;
  content += `\n=====================================\n\n`;
  content += meeting.transcript_text;
  
  // 创建并下载文件
  const blob = new Blob([content], { type: 'text/plain;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', fileName);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
  
  showSuccess('文字稿下载成功');
}

// 下载AI分析（客户详情中使用）
function downloadAISummaryInCustomer() {
  if (!currentMeetingDataInCustomer || !currentMeetingDataInCustomer.ai_summary) {
    showWarning('暂无AI分析内容');
    return;
  }
  
  const meeting = currentMeetingDataInCustomer;
  const fileName = `${meeting.meeting_title || '会议'}_AI分析_${new Date().toISOString().split('T')[0]}.md`;
  
  // 构建Markdown内容
  let content = `# ${meeting.meeting_title || '会议'} - AI智能分析\n\n`;
  content += `---\n\n`;
  content += `## 📋 会议信息\n\n`;
  content += `- **会议标题**: ${meeting.meeting_title || '未命名会议'}\n`;
  content += `- **会议日期**: ${meeting.meeting_date ? new Date(meeting.meeting_date).toLocaleDateString('zh-CN') : '-'}\n`;
  if (meeting.customer) {
    content += `- **关联客户**: ${meeting.customer.name} (${meeting.customer.company})\n`;
  }
  content += `- **分析时间**: ${new Date().toLocaleString('zh-CN')}\n`;
  content += `\n---\n\n`;
  content += `## 🤖 AI会议总结\n\n`;
  content += meeting.ai_summary;
  content += `\n\n---\n\n`;
  content += `*本分析由AI自动生成，仅供参考*\n`;
  
  // 创建并下载文件
  const blob = new Blob([content], { type: 'text/markdown;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', fileName);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
  
  showSuccess('AI分析下载成功');
}

function showToast(message, type) {
  // 显示提示消息
  console.log(`${type}: ${message}`);
}
</script>
