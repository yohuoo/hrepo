<!-- 页面标题和面包屑 -->
<div class="row mb-4">
  <div class="col-12">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/dashboard">控制台</a></li>
        <li class="breadcrumb-item"><a href="/emails">邮件</a></li>
        <li class="breadcrumb-item active">邮件模板</li>
      </ol>
    </nav>
    <h1 class="page-title">邮件模板</h1>
  </div>
</div>

<!-- 搜索和操作区域 -->
<div class="card mb-4">
  <div class="card-body">
    <div class="row g-3">
      <div class="col-md-8">
        <div class="input-group">
          <span class="input-group-text">
            <i class="bi bi-search"></i>
          </span>
          <input type="text" class="form-control" id="searchKeyword" placeholder="搜索模板标题或内容...">
        </div>
      </div>
      <div class="col-md-4">
        <div class="d-flex gap-2">
          <button class="btn btn-outline-primary" onclick="showTemplatePreview()">
            <i class="bi bi-eye"></i> 预览模板
          </button>
          <button class="btn btn-primary" onclick="createNewTemplate()">
            <i class="bi bi-plus-lg"></i> 新建模板
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 模板列表 -->
<div class="row" id="templateList">
  <div class="col-12 text-center p-5">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">加载中...</span>
    </div>
  </div>
</div>

<!-- 新建模板模态框 -->
<div class="modal fade" id="addTemplateModal" tabindex="-1">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">新建邮件</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <!-- 左侧：邮件模板和个性化变量 -->
          <div class="col-md-4">
            <!-- 邮件模板 -->
            <div class="card mb-3">
              <div class="card-header d-flex justify-content-between align-items-center">
                <h6 class="mb-0">邮件模板</h6>
                <button class="btn btn-sm btn-primary" onclick="createNewTemplate()">
                  <i class="bi bi-plus"></i> 新建
                </button>
              </div>
              <div class="card-body">
                <div class="mb-3">
                  <select class="form-select" id="templateSelect" onchange="loadTemplate()">
                    <option value="">选择模板</option>
                  </select>
                </div>
                <div id="templateList">
                  <!-- 模板列表将通过JavaScript动态加载 -->
                </div>
              </div>
            </div>
            
            <!-- 个性化变量 -->
            <div class="card">
              <div class="card-header">
                <h6 class="mb-0">个性化变量</h6>
              </div>
              <div class="card-body">
                <div class="d-grid gap-2">
                  <button class="btn btn-outline-secondary btn-sm" onclick="insertVariable('{{firstName}}')">
                    {{firstName}}
                  </button>
                  <button class="btn btn-outline-secondary btn-sm" onclick="insertVariable('{{lastName}}')">
                    {{lastName}}
                  </button>
                  <button class="btn btn-outline-secondary btn-sm" onclick="insertVariable('{{companyName}}')">
                    {{companyName}}
                  </button>
                  <button class="btn btn-outline-secondary btn-sm" onclick="insertVariable('{{position}}')">
                    {{position}}
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- 右侧：邮件编辑器 -->
          <div class="col-md-8">
            <div class="card">
              <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                  <h6 class="mb-0">邮件编辑器</h6>
                  <div class="btn-group" role="group">
                    <button class="btn btn-outline-secondary btn-sm" onclick="saveDraft()">
                      <i class="bi bi-floppy"></i> 保存草稿
                    </button>
                    <button class="btn btn-primary btn-sm" onclick="previewEmail()">
                      <i class="bi bi-eye"></i> 发送预览
                    </button>
                    <button class="btn btn-primary btn-sm" onclick="sendEmail()">
                      <i class="bi bi-send"></i> 发送
                    </button>
                  </div>
                </div>
              </div>
              <div class="card-body">
                <form id="emailForm">
                  <div class="mb-3">
                    <label class="form-label">收件人</label>
                    <input type="text" class="form-control" id="recipients" placeholder="点击选择收件人" readonly onclick="selectRecipients()" style="cursor: pointer;">
                    <div class="mt-2 d-flex gap-2">
                      <button type="button" class="btn btn-sm btn-outline-primary" onclick="selectRecipients()">
                        <i class="bi bi-pencil"></i> 编辑收件人
                      </button>
                      <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearAllRecipients()" id="clearRecipientsBtn" style="display: none;">
                        <i class="bi bi-x-circle"></i> 清空收件人
                      </button>
                    </div>
                  </div>
                  
                  <div class="mb-3">
                    <label class="form-label">发件人邮箱</label>
                    <select class="form-select" id="senderEmail">
                      <option value="">选择发件邮箱...</option>
                    </select>
                  </div>
                  
                  <div class="mb-3">
                    <label class="form-label">主题</label>
                    <input type="text" class="form-control" id="emailSubject" placeholder="请输入邮件主题">
                  </div>
                  
                  <div class="mb-3">
                    <label class="form-label">内容</label>
                    <div class="toolbar mb-2">
                      <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="formatText('bold')">
                          <strong>B</strong>
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="formatText('italic')">
                          <em>I</em>
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="formatText('underline')">
                          <u>U</u>
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertList('unordered')">
                          <i class="bi bi-list-ul"></i>
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertList('ordered')">
                          <i class="bi bi-list-ol"></i>
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertLink()">
                          <i class="bi bi-link"></i>
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="insertImage()">
                          <i class="bi bi-image"></i>
                        </button>
                      </div>
                    </div>
                    <textarea class="form-control" id="emailContent" rows="15" placeholder="Dear {{firstName}},&#10;&#10;I hope this email finds you well..."></textarea>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
        <button type="button" class="btn btn-primary" onclick="saveTemplate()">保存模板</button>
      </div>
    </div>
  </div>
</div>

<!-- 收件人选择模态框 -->
<div class="modal fade" id="recipientSelectModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">选择收件人</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <!-- 类型切换和搜索 -->
        <div class="row mb-3">
          <div class="col-md-12">
            <div class="btn-group w-100 mb-3" role="group">
              <button type="button" class="btn btn-outline-primary active" id="btnContacts" onclick="switchRecipientType('contacts')">
                <i class="bi bi-person-lines-fill"></i> 联系人
              </button>
              <button type="button" class="btn btn-outline-primary" id="btnCustomers" onclick="switchRecipientType('customers')">
                <i class="bi bi-people"></i> 客户
              </button>
            </div>
            <div class="input-group">
              <span class="input-group-text"><i class="bi bi-search"></i></span>
              <input type="text" class="form-control" placeholder="搜索名称、公司或域名..." id="recipientSearch" oninput="searchRecipients()">
            </div>
          </div>
        </div>
        
        <!-- 收件人列表 -->
        <div class="row">
          <div class="col-md-12">
            <div class="card">
              <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                  <h6 class="mb-0" id="recipientListTitle">联系人列表</h6>
                  <div>
                    <button class="btn btn-sm btn-outline-primary" onclick="selectAllRecipients()">全选</button>
                    <button class="btn btn-sm btn-outline-secondary" onclick="clearSelection()">清空</button>
                  </div>
                </div>
              </div>
              <div class="card-body" style="max-height: 400px; overflow-y: auto;">
                <div id="recipientList">
                  <!-- 收件人列表将通过JavaScript动态加载 -->
                  <div class="text-center p-3">
                    <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">加载中...</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <div class="d-flex justify-content-between align-items-center w-100">
          <span id="selectedRecipientsCount">已选择 0 人</span>
          <div>
            <button class="btn btn-secondary me-2" onclick="cancelRecipientSelection()">取消</button>
            <button class="btn btn-primary" onclick="confirmRecipients()">确定</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 发送确认模态框 -->
<div class="modal fade" id="sendConfirmModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-warning">
        <h5 class="modal-title">
          <i class="bi bi-send-check"></i> 确认发送
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="alert alert-warning mb-3">
          <i class="bi bi-exclamation-triangle-fill me-2"></i>
          <strong>请确认以下信息：</strong>
        </div>
        <div class="mb-3">
          <label class="text-muted small">收件人数量</label>
          <div class="fs-5 fw-bold" id="confirmRecipientCount">0 位收件人</div>
        </div>
        <div class="mb-3">
          <label class="text-muted small">邮件主题</label>
          <div class="fw-bold" id="confirmEmailSubject">-</div>
        </div>
        <div>
          <label class="text-muted small">发件邮箱</label>
          <div class="fw-bold" id="confirmSenderEmail">-</div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="bi bi-x-circle"></i> 取消
        </button>
        <button type="button" class="btn btn-primary" onclick="confirmSendEmail()">
          <i class="bi bi-send-fill"></i> 确认发送
        </button>
      </div>
    </div>
  </div>
</div>

<!-- AI辅助预览模态框（用于模板） -->
<div class="modal fade" id="aiTemplatePreviewModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header bg-gradient-primary text-white">
        <h5 class="modal-title" id="aiTemplateModalTitle">
          <i class="bi bi-stars"></i> AI生成结果
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body" id="aiTemplateModalBody">
        <div class="text-center p-5">
          <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;" role="status"></div>
          <p class="loading-text">生成中<span class="loading-dots">.</span></p>
        </div>
      </div>
      <div class="modal-footer" id="aiTemplateModalFooter" style="display: none;">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="bi bi-x-lg"></i> 取消
        </button>
        <button type="button" class="btn btn-primary" onclick="applyTemplateAIResult()">
          <i class="bi bi-check-lg"></i> 替换原内容
        </button>
      </div>
    </div>
  </div>
</div>

<style>
/* AI模态框样式 */
.bg-gradient-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
}

.bg-gradient-info {
  background: linear-gradient(135deg, #17a2b8 0%, #138496 100%) !important;
}

.ai-preview-content {
  padding: 20px;
  background: #f8f9fa;
  border: 2px solid #e9ecef;
  border-radius: 12px;
  min-height: 100px;
  white-space: pre-line;
  line-height: 1.8;
  color: #212529;
  font-size: 0.95rem;
}

.ai-preview-label {
  font-weight: 700;
  color: #495057;
  margin-bottom: 10px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.loading-dots {
  display: inline-block;
  width: 20px;
  text-align: left;
}
</style>

<script>
// 全局变量
let currentTemplates = [];
let selectedRecipients = [];
let tempSelectedRecipients = []; // 临时选择（模态框中）
let currentTemplate = null;
let aiGeneratedTemplateTitle = '';
let aiGeneratedTemplateContent = '';
let loadingDotsInterval = null;

document.addEventListener('DOMContentLoaded', async function() {
  console.log('✅ 邮件模板页面已加载');
  
  // 初始化收件人显示
  updateRecipientDisplay();
  
  // 加载模板列表
  await loadTemplates();
  
  // 加载发件邮箱列表
  await loadSenderEmails();
  
  // 搜索功能
  
  // 监听收件人选择模态框关闭事件
  const recipientModal = document.getElementById('recipientSelectModal');
  if (recipientModal) {
    recipientModal.addEventListener('hidden.bs.modal', function(event) {
      console.log('📋 收件人选择模态框已关闭');
    });
  }
  const searchInput = document.getElementById('searchKeyword');
  if (searchInput) {
    searchInput.addEventListener('input', debounce(searchTemplates, 500));
  }
});

// 加载发件邮箱列表
async function loadSenderEmails() {
  try {
    const token = localStorage.getItem('authToken');
    const response = await fetch('/api/user-email-bindings', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    const data = await response.json();
    
    if (data.success && data.bindings) {
      const select = document.getElementById('senderEmail');
      select.innerHTML = '<option value="">选择发件邮箱...</option>';
      
      let defaultEmailId = null;
      
      data.bindings.forEach(binding => {
        const option = document.createElement('option');
        option.value = binding.id;
        option.textContent = `${binding.email_address}${binding.is_default ? ' (默认)' : ''}`;
        select.appendChild(option);
        
        // 记录默认邮箱
        if (binding.is_default) {
          defaultEmailId = binding.id;
        }
      });
      
      // 优先选择：默认邮箱 > 唯一邮箱
      if (defaultEmailId) {
        select.value = defaultEmailId;
        console.log('✅ 已自动选择默认邮箱:', defaultEmailId);
      } else if (data.bindings.length === 1) {
        select.value = data.bindings[0].id;
        console.log('✅ 已自动选择唯一邮箱:', data.bindings[0].id);
      }
      
      console.log('✅ 发件邮箱列表加载完成:', data.bindings.length, '个');
    }
  } catch (error) {
    console.error('❌ 加载发件邮箱失败:', error);
    showError('加载发件邮箱失败');
  }
}

// 更新收件人显示
function updateRecipientDisplay() {
  const recipientsInput = document.getElementById('recipients');
  const clearBtn = document.getElementById('clearRecipientsBtn');
  
  if (recipientsInput) {
    if (selectedRecipients.length === 0) {
      recipientsInput.value = '';
      recipientsInput.placeholder = '点击选择收件人';
      // 隐藏清空按钮
      if (clearBtn) clearBtn.style.display = 'none';
    } else {
      // 按邮箱去重，统计唯一收件人数量
      const uniqueEmails = new Set(selectedRecipients.map(r => r.email));
      const totalUnique = uniqueEmails.size;
      
      // 统计联系人和客户数量
      const contactCount = selectedRecipients.filter(r => r.type === 'contacts').length;
      const customerCount = selectedRecipients.filter(r => r.type === 'customers').length;
      
      const parts = [];
      if (contactCount > 0) parts.push(`${contactCount}位联系人`);
      if (customerCount > 0) parts.push(`${customerCount}位客户`);
      
      recipientsInput.value = `已选择 ${parts.join('、')}（共${totalUnique}个邮箱）`;
      
      // 显示清空按钮
      if (clearBtn) clearBtn.style.display = 'inline-block';
    }
  }
}

// 清空所有收件人
function clearAllRecipients() {
  if (selectedRecipients.length > 0 && !confirm('确定要清空所有已选择的收件人吗？')) {
    return;
  }
  selectedRecipients = [];
  updateRecipientDisplay();
  console.log('🗑️ 已清空所有收件人');
  showSuccess('收件人已清空');
}

// 加载模板列表
async function loadTemplates() {
  try {
    const response = await axios.get('/api/email-templates/');
    currentTemplates = response.data.templates || [];
    
    // 填充模板下拉选择器
    const templateSelect = document.getElementById('templateSelect');
    if (templateSelect) {
      templateSelect.innerHTML = '<option value="">选择模板</option>';
      currentTemplates.forEach(template => {
        const option = document.createElement('option');
        option.value = template.id;
        option.textContent = template.title;
        templateSelect.appendChild(option);
      });
    }
    
    if (currentTemplates.length === 0) {
      $('#templateList').html(`
        <div class="col-12">
          <div class="empty-state">
            <i class="bi bi-file-earmark-text"></i>
            <h5>暂无模板</h5>
            <p>创建您的第一个邮件模板</p>
          </div>
        </div>
      `);
      return;
    }
    
    renderTemplateList(currentTemplates);
  } catch (error) {
    console.error('加载模板失败:', error);
    showToast('加载模板失败', 'danger');
  }
}

// 渲染模板列表
function renderTemplateList(templates) {
  let html = '';
  templates.forEach(template => {
    const variables = extractVariables(template.content);
    html += `
      <div class="col-md-6 col-lg-4 mb-3">
        <div class="card template-card" onclick="editTemplate(${template.id})" style="cursor: pointer;">
          <div class="card-body">
            <h6 class="card-title">${template.title}</h6>
            <p class="card-text text-truncate-3">${template.content.substring(0, 100)}...</p>
            <div class="mt-2">
              ${variables.map(v => `<span class="badge bg-info me-1">{{${v}}}</span>`).join('')}
            </div>
            <div class="mt-3">
              <small class="text-muted">创建时间: ${formatDate(template.created_at)}</small>
            </div>
          </div>
          <div class="card-footer" onclick="event.stopPropagation();">
            <div class="d-flex justify-content-between">
              <button class="btn btn-sm btn-outline-primary" onclick="editTemplate(${template.id})">
                <i class="bi bi-pencil"></i> 编辑
              </button>
              <button class="btn btn-sm btn-outline-danger" onclick="deleteTemplate(${template.id})">
                <i class="bi bi-trash"></i> 删除
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  });
  
  $('#templateList').html(html);
}

// 搜索模板
function searchTemplates() {
  const keyword = $('#searchKeyword').val().toLowerCase();
  
  if (!keyword) {
    renderTemplateList(currentTemplates);
    return;
  }
  
  const filtered = currentTemplates.filter(template => 
    template.title.toLowerCase().includes(keyword) ||
    template.content.toLowerCase().includes(keyword)
  );
  
  renderTemplateList(filtered);
}

// 提取变量
function extractVariables(content) {
  const matches = content.match(/\{\{([^}]+)\}\}/g);
  return matches ? [...new Set(matches.map(m => m.replace(/[{}]/g, '')))] : [];
}

// 新建模板
function createNewTemplate() {
  console.log('✅ 点击新建模板');
  
  // 创建新建模板模态框（如果不存在）
  let templateModal = document.getElementById('createTemplateModal');
  if (!templateModal) {
    const modalHTML = `
      <div class="modal fade" id="createTemplateModal" tabindex="-1">
        <div class="modal-dialog modal-lg" style="max-width: 800px;">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title"><i class="bi bi-file-earmark-plus"></i> 新建邮件模板</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <div class="row">
                <!-- 左侧：输入区域 -->
                <div class="col-md-9">
                  <div class="mb-3">
                    <label class="form-label">模板标题</label>
                    <input type="text" class="form-control" id="newTemplateTitle" placeholder="请输入模板标题">
                  </div>
                  
                  <div class="mb-3">
                    <label class="form-label d-flex justify-content-between align-items-center">
                      <span>模板内容</span>
                      <div class="btn-group btn-group-sm" role="group">
                        <button type="button" class="btn btn-outline-primary" onclick="aiEnrichTemplate()" title="AI智能生成：草稿优化或生成回复邮件">
                          <i class="bi bi-stars"></i> AI智能生成
                        </button>
                        <button type="button" class="btn btn-outline-info" onclick="translateTemplate()" title="翻译模板">
                          <i class="bi bi-translate"></i> 翻译
                        </button>
                      </div>
                    </label>
                    <textarea class="form-control" id="newTemplateContent" rows="12" placeholder="请输入模板内容，可以使用右侧的个性化变量"></textarea>
                  </div>
                </div>
                
                <!-- 右侧：个性化变量 -->
                <div class="col-md-3">
                  <label class="form-label">个性化变量</label>
                  <div class="d-grid gap-2">
                    <button class="btn btn-outline-primary btn-sm" onclick="insertVariableToNewTemplate('{{firstName}}')" title="插入收件人名字">
                      <i class="bi bi-person"></i> {{firstName}}
                    </button>
                    <button class="btn btn-outline-primary btn-sm" onclick="insertVariableToNewTemplate('{{lastName}}')" title="插入收件人姓氏">
                      <i class="bi bi-person-badge"></i> {{lastName}}
                    </button>
                    <button class="btn btn-outline-primary btn-sm" onclick="insertVariableToNewTemplate('{{company}}')" title="插入公司名称">
                      <i class="bi bi-building"></i> {{company}}
                    </button>
                    <button class="btn btn-outline-primary btn-sm" onclick="insertVariableToNewTemplate('{{position}}')" title="插入职位">
                      <i class="bi bi-briefcase"></i> {{position}}
                    </button>
                  </div>
                  
                  <div class="mt-3 p-2 bg-light rounded">
                    <small class="text-muted">
                      <i class="bi bi-info-circle"></i> 点击上方按钮可将变量插入到光标位置
                    </small>
                  </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
              <button type="button" class="btn btn-primary" onclick="saveNewTemplate()">
                <i class="bi bi-check-lg"></i> 保存模板
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);
  }
  
  // 清空表单
  const titleInput = document.getElementById('newTemplateTitle');
  const contentInput = document.getElementById('newTemplateContent');
  if (titleInput) titleInput.value = '';
  if (contentInput) contentInput.value = '';
  
  // 显示模态框
  const modal = new bootstrap.Modal(document.getElementById('createTemplateModal'));
  modal.show();
}

// 插入变量到新建模板
function insertVariableToNewTemplate(variable) {
  const textarea = document.getElementById('newTemplateContent');
  if (!textarea) return;
  
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const content = textarea.value;
  
  textarea.value = content.substring(0, start) + variable + content.substring(end);
  textarea.selectionStart = textarea.selectionEnd = start + variable.length;
  textarea.focus();
  
  console.log('✅ 插入变量:', variable);
}

// 保存新建模板
async function saveNewTemplate() {
  const title = document.getElementById('newTemplateTitle').value.trim();
  const content = document.getElementById('newTemplateContent').value.trim();
  
  if (!title) {
    showError('请输入模板标题');
    return;
  }
  
  if (!content) {
    showError('请输入模板内容');
    return;
  }
  
  try {
    showLoading();
    
    const token = localStorage.getItem('authToken');
    
    console.log('🔄 创建新模板...');
    console.log('标题:', title);
    console.log('内容:', content);
    
    const response = await fetch('/api/email-templates/', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        title: title,
        content: content
      })
    });
    
    const data = await response.json();
    console.log('📥 创建结果:', data);
    
    if (!data.success) {
      showError('创建失败: ' + (data.message || '未知错误'));
      hideLoading();
      return;
    }
    
    showSuccess('模板创建成功！');
    
    // 关闭模态框
    const modal = bootstrap.Modal.getInstance(document.getElementById('createTemplateModal'));
    if (modal) {
      modal.hide();
    }
    
    // 重新加载模板列表
    await loadTemplates();
    
  } catch (error) {
    console.error('❌ 创建模板失败:', error);
    showError('创建模板失败: ' + error.message);
  } finally {
    hideLoading();
  }
}

// 加载模板到编辑器
function loadTemplate() {
  const templateId = $('#templateSelect').val();
  
  if (!templateId) {
    // 清空选择时
    $('#emailSubject').val('');
    $('#emailContent').val('');
    currentTemplate = null;
    selectedRecipients = [];
    updateRecipientDisplay();
    console.log('🗑️ 已清空模板和收件人');
    return;
  }
  
  const template = currentTemplates.find(t => t.id == templateId);
  if (template) {
    $('#emailSubject').val(template.title);
    $('#emailContent').val(template.content);
    currentTemplate = template;
    
    // 切换模板时清空收件人选择
    selectedRecipients = [];
    updateRecipientDisplay();
    console.log('📧 已加载模板:', template.title, '- 收件人已清空');
  }
}

// 插入变量
function insertVariable(variable) {
  const textarea = document.getElementById('emailContent');
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const text = textarea.value;
  const before = text.substring(0, start);
  const after = text.substring(end, text.length);
  
  textarea.value = before + variable + after;
  textarea.selectionStart = textarea.selectionEnd = start + variable.length;
  textarea.focus();
}

// 格式化文本
function formatText(command) {
  document.execCommand(command, false, null);
}

// 插入列表
function insertList(type) {
  const listText = type === 'unordered' ? '• ' : '1. ';
  insertText(listText);
}

// 插入链接
function insertLink() {
  const url = prompt('请输入链接地址:');
  if (url) {
    const text = prompt('请输入链接文本:') || url;
    insertText(`<a href="${url}">${text}</a>`);
  }
}

// 插入图片
function insertImage() {
  const url = prompt('请输入图片地址:');
  if (url) {
    insertText(`<img src="${url}" alt="图片" style="max-width: 100%;">`);
  }
}

// 插入文本
function insertText(text) {
  const textarea = document.getElementById('emailContent');
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const content = textarea.value;
  
  textarea.value = content.substring(0, start) + text + content.substring(end);
  textarea.selectionStart = textarea.selectionEnd = start + text.length;
  textarea.focus();
}

// 选择收件人
// 全局变量
let currentRecipientType = 'contacts';  // contacts 或 customers
let allRecipients = [];  // 所有收件人数据
let filteredRecipients = [];  // 过滤后的收件人数据

function selectRecipients() {
  console.log('✅ 选择收件人');
  
  // 备份当前选择到临时变量
  tempSelectedRecipients = JSON.parse(JSON.stringify(selectedRecipients));
  console.log('📋 备份当前选择:', tempSelectedRecipients.length, '人');
  
  const modal = new bootstrap.Modal(document.getElementById('recipientSelectModal'));
  modal.show();
  
  // 默认加载联系人
  currentRecipientType = 'contacts';
  document.getElementById('btnContacts').classList.add('active');
  document.getElementById('btnCustomers').classList.remove('active');
  document.getElementById('recipientSearch').value = '';
  
  loadRecipientsForSelection();
}

// 切换收件人类型
function switchRecipientType(type) {
  console.log('🔄 切换收件人类型:', type);
  currentRecipientType = type;
  
  // 更新按钮状态
  document.getElementById('btnContacts').classList.toggle('active', type === 'contacts');
  document.getElementById('btnCustomers').classList.toggle('active', type === 'customers');
  
  // 更新标题
  document.getElementById('recipientListTitle').textContent = type === 'contacts' ? '联系人列表' : '客户列表';
  
  // 清空搜索框
  document.getElementById('recipientSearch').value = '';
  
  // 加载数据（会自动同步显示相同邮箱的选中状态）
  loadRecipientsForSelection();
  
  console.log('📋 当前已选收件人邮箱:', selectedRecipients.map(r => r.email).join(', '));
}

// 加载收件人列表（统一接口）
async function loadRecipientsForSelection() {
  try {
    console.log('🔄 加载收件人列表，类型:', currentRecipientType);
    
    // 显示加载状态
    document.getElementById('recipientList').innerHTML = `
      <div class="text-center p-3">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">加载中...</span>
        </div>
      </div>
    `;
    
    const token = localStorage.getItem('authToken');
    const endpoint = currentRecipientType === 'contacts' ? '/api/contacts/?pageSize=1000' : '/api/customers?page_size=1000';
    
    const response = await fetch(endpoint, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    console.log('📥 收件人数据:', data);
    
    if (!data.success) {
      showError('加载失败: ' + (data.message || '未知错误'));
      return;
    }
    
    // 统一数据格式
    allRecipients = currentRecipientType === 'contacts' ? (data.contacts || []) : (data.customers || []);
    filteredRecipients = allRecipients;
    
    renderRecipientList(filteredRecipients);
    
    console.log(`✅ 加载了 ${allRecipients.length} 个${currentRecipientType === 'contacts' ? '联系人' : '客户'}`);
  } catch (error) {
    console.error('❌ 加载失败:', error);
    showError('加载失败: ' + error.message);
    document.getElementById('recipientList').innerHTML = `
      <div class="alert alert-danger m-3">加载失败，请重试</div>
    `;
  }
}

// 渲染收件人列表
function renderRecipientList(recipients) {
  if (recipients.length === 0) {
    document.getElementById('recipientList').innerHTML = `
      <div class="alert alert-info m-3">暂无数据</div>
    `;
    return;
  }
  
  let html = '';
  recipients.forEach(recipient => {
    // 检查是否已选中（通过邮箱匹配，不限类型）
    const isSelected = tempSelectedRecipients.some(r => r.email === recipient.email);
    html += `
      <div class="recipient-item d-flex align-items-center p-2 border-bottom" style="cursor: pointer;" onclick="toggleRecipientCheckbox(${recipient.id})">
        <input type="checkbox" class="form-check-input me-3 recipient-checkbox" 
               value="${recipient.id}" 
               data-type="${currentRecipientType}"
               data-name="${recipient.name}"
               data-email="${recipient.email}"
               data-company="${recipient.company || ''}"
               ${isSelected ? 'checked' : ''} 
               onclick="event.stopPropagation(); toggleRecipient(${recipient.id}, this.checked)">
        <div class="flex-grow-1">
          <div class="fw-bold">${recipient.name}</div>
          <small class="text-muted">${recipient.email}${recipient.company ? ' • ' + recipient.company : ''}</small>
        </div>
        <span class="badge ${currentRecipientType === 'contacts' ? 'bg-info' : 'bg-success'}">${currentRecipientType === 'contacts' ? '联系人' : '客户'}</span>
      </div>
    `;
  });
  
  document.getElementById('recipientList').innerHTML = html;
  updateSelectedCount();
}

// 切换checkbox（点击整行时）
function toggleRecipientCheckbox(recipientId) {
  const checkbox = document.querySelector(`.recipient-checkbox[value="${recipientId}"]`);
  if (checkbox) {
    checkbox.checked = !checkbox.checked;
    toggleRecipient(recipientId, checkbox.checked);
  }
}

// 搜索收件人
function searchRecipients() {
  const searchTerm = document.getElementById('recipientSearch').value.toLowerCase().trim();
  
  if (!searchTerm) {
    filteredRecipients = allRecipients;
  } else {
    filteredRecipients = allRecipients.filter(recipient => {
      const name = (recipient.name || '').toLowerCase();
      const email = (recipient.email || '').toLowerCase();
      const company = (recipient.company || '').toLowerCase();
      const domain = (recipient.domain || '').toLowerCase();
      
      return name.includes(searchTerm) || 
             email.includes(searchTerm) || 
             company.includes(searchTerm) || 
             domain.includes(searchTerm);
    });
  }
  
  console.log(`🔍 搜索 "${searchTerm}"，找到 ${filteredRecipients.length} 个结果`);
  renderRecipientList(filteredRecipients);
}

// 切换收件人选择（按邮箱同步）
function toggleRecipient(recipientId, isSelected) {
  const recipient = allRecipients.find(r => r.id === recipientId);
  if (!recipient) return;
  
  const recipientEmail = recipient.email;
  console.log('✅ 切换收件人:', recipient.name, recipientEmail, '选中:', isSelected);
  
  if (isSelected) {
    // 检查是否已经有相同邮箱的人被选中
    const existingSameEmail = tempSelectedRecipients.find(r => r.email === recipientEmail);
    
    if (!existingSameEmail) {
      // 如果没有相同邮箱，添加当前收件人
      const recipientWithType = { ...recipient, type: currentRecipientType };
      tempSelectedRecipients.push(recipientWithType);
      console.log('➕ 添加收件人:', recipient.name, '邮箱:', recipientEmail, '类型:', currentRecipientType);
    } else {
      // 如果已有相同邮箱，检查是否是当前类型
      if (existingSameEmail.type !== currentRecipientType) {
        // 不同类型，也添加（同一邮箱可能既是联系人又是客户）
        const recipientWithType = { ...recipient, type: currentRecipientType };
        tempSelectedRecipients.push(recipientWithType);
        console.log('➕ 添加收件人（同邮箱不同类型）:', recipient.name, '类型:', currentRecipientType);
      } else {
        console.log('⚠️ 该收件人已在列表中');
      }
    }
  } else {
    // 取消选中：移除所有相同邮箱的收件人（包括联系人和客户）
    const beforeLength = tempSelectedRecipients.length;
    tempSelectedRecipients = tempSelectedRecipients.filter(r => r.email !== recipientEmail);
    console.log('➖ 移除邮箱为', recipientEmail, '的所有收件人，数量从', beforeLength, '变为', tempSelectedRecipients.length);
    
    // 刷新列表以同步其他类型的checkbox状态
    renderRecipientList(filteredRecipients);
  }
  
  updateSelectedCount();
}

// 更新选中数量
function updateSelectedCount() {
  const count = tempSelectedRecipients.length;
  const countElement = document.getElementById('selectedRecipientsCount');
  if (countElement) {
    countElement.textContent = `已选择 ${count} 人`;
  }
  console.log('📊 当前选中数量:', count);
}

// 全选收件人
function selectAllRecipients() {
  filteredRecipients.forEach(recipient => {
    // 检查是否已选中（通过邮箱）
    if (!tempSelectedRecipients.some(r => r.email === recipient.email)) {
      const recipientWithType = { ...recipient, type: currentRecipientType };
      tempSelectedRecipients.push(recipientWithType);
    }
  });
  
  // 刷新列表显示
  renderRecipientList(filteredRecipients);
  console.log('✅ 全选完成，共选中:', selectedRecipients.length);
}

// 清空选择（清空所有，不分类型）
function clearSelection() {
  tempSelectedRecipients = [];
  renderRecipientList(filteredRecipients);
  updateSelectedCount();
  console.log('🗑️ 已清空所有选择');
}

// 确认收件人
function confirmRecipients() {
  console.log('✅ 确认收件人，共选择:', tempSelectedRecipients.length);
  
  // 应用临时选择到正式变量
  selectedRecipients = JSON.parse(JSON.stringify(tempSelectedRecipients));
  
  // 更新收件人显示
  updateRecipientDisplay();
  
  const modal = bootstrap.Modal.getInstance(document.getElementById('recipientSelectModal'));
  if (modal) {
    modal.hide();
  }
  
  console.log('📋 选中的联系人列表:', selectedRecipients);
}

// 取消选择（恢复原始状态）
function cancelRecipientSelection() {
  console.log('❌ 取消选择，恢复到打开前的状态');
  // 不需要做任何操作，因为tempSelectedRecipients在下次打开时会被重置
  
  const modal = bootstrap.Modal.getInstance(document.getElementById('recipientSelectModal'));
  if (modal) {
    modal.hide();
  }
}

// 保存草稿
async function saveDraft() {
  const formData = {
    title: $('#emailSubject').val(),
    content: $('#emailContent').val(),
    status: 'draft'
  };
  
  try {
    await axios.post('/api/emails/draft', formData);
    showToast('草稿已保存', 'success');
  } catch (error) {
    showToast('保存草稿失败', 'danger');
  }
}

// 当前预览索引
let currentPreviewIndex = 0;
let emailPreviews = [];

// 预览邮件
async function previewEmail() {
  console.log('✅ 点击发送预览');
  
  if (selectedRecipients.length === 0) {
    showError('请先选择收件人');
    return;
  }
  
  const subject = document.getElementById('emailSubject').value;
  const content = document.getElementById('emailContent').value;
  
  if (!subject || !content) {
    showError('请填写邮件主题和内容');
    return;
  }
  
  try {
    showLoading();
    
    const token = localStorage.getItem('authToken');
    
    console.log('🔄 调用邮件预览接口...');
    console.log('选中的收件人:', selectedRecipients);
    console.log('当前模板ID:', currentTemplate);
    
    // 分离联系人和客户ID
    const contactIds = selectedRecipients.filter(r => r.type === 'contacts').map(r => r.id);
    const customerIds = selectedRecipients.filter(r => r.type === 'customers').map(r => r.id);
    
    console.log('📋 联系人ID:', contactIds);
    console.log('📋 客户ID:', customerIds);
    
    // 构建请求体
    const requestBody = {
      contact_ids: contactIds,
      customer_ids: customerIds,
      template_title: subject,
      template_content: content
    };
    
    // 如果选择了模板，则添加 template_id
    if (currentTemplate) {
      requestBody.template_id = currentTemplate.id || currentTemplate;
    }
    
    console.log('📤 请求体:', requestBody);
    
    // 调用批量预览接口
    const response = await fetch('/api/email-templates/batch-preview', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });
    
    const data = await response.json();
    console.log('📥 预览数据:', data);
    
    if (!data.success) {
      showError('预览失败: ' + (data.message || '未知错误'));
      hideLoading();
      return;
    }
    
    emailPreviews = data.previews || [];
    currentPreviewIndex = 0;
    
    console.log(`✅ 生成了 ${emailPreviews.length} 个预览`);
    
    // 显示预览模态框
    showPreviewModal();
    
  } catch (error) {
    console.error('❌ 预览失败:', error);
    showError('预览失败: ' + error.message);
  } finally {
    hideLoading();
  }
}

// 显示预览模态框
function showPreviewModal() {
  if (emailPreviews.length === 0) {
    showWarning('没有可预览的内容');
    return;
  }
  
  // 创建预览模态框（如果不存在）
  let previewModal = document.getElementById('emailPreviewModal');
  if (!previewModal) {
    const modalHTML = `
      <div class="modal fade" id="emailPreviewModal" tabindex="-1">
        <div class="modal-dialog modal-lg" style="max-width: 700px;">
          <div class="modal-content" style="position: relative;">
            <div class="modal-header">
              <h5 class="modal-title">邮件预览</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" style="min-height: 500px; max-height: 70vh; overflow-y: auto; padding: 2rem;">
              <div id="previewContent">
                <!-- 预览内容 -->
              </div>
            </div>
            
            <!-- 左右切换按钮 - 移到 modal-content 外层 -->
            <button class="btn btn-primary rounded-circle preview-nav-btn" 
                    onclick="previousPreview()" 
                    id="prevBtn" 
                    style="display: none; position: absolute; left: -60px; top: 50%; transform: translateY(-50%); z-index: 1100; width: 45px; height: 45px; opacity: 0.9;">
              <i class="bi bi-chevron-left"></i>
            </button>
            
            <button class="btn btn-primary rounded-circle preview-nav-btn" 
                    onclick="nextPreview()" 
                    id="nextBtn" 
                    style="display: none; position: absolute; right: -60px; top: 50%; transform: translateY(-50%); z-index: 1100; width: 45px; height: 45px; opacity: 0.9;">
              <i class="bi bi-chevron-right"></i>
            </button>
            
            <div class="modal-footer">
              <div class="d-flex justify-content-between align-items-center w-100">
                <span id="previewCounter" class="text-muted">1 / 1</span>
                <div>
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                  <button type="button" class="btn btn-primary" onclick="confirmAndSend()">
                    <i class="bi bi-send"></i> 确认发送
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);
  }
  
  // 渲染第一个预览
  renderPreview();
  
  // 显示模态框
  const modal = new bootstrap.Modal(document.getElementById('emailPreviewModal'));
  modal.show();
}

// 渲染预览内容
function renderPreview() {
  if (emailPreviews.length === 0) return;
  
  const preview = emailPreviews[currentPreviewIndex];
  const total = emailPreviews.length;
  
  const previewHTML = `
    <div class="email-preview-card">
      <div class="preview-header mb-4 p-3 bg-light rounded">
        <div class="mb-2">
          <strong class="text-primary">收件人：</strong> 
          <span>${preview.recipient_name || '未知'}</span>
        </div>
        <div>
          <strong class="text-primary">邮箱：</strong> 
          <span>${preview.recipient_email || '未知'}</span>
        </div>
      </div>
      
      <div class="preview-body">
        <div class="mb-4">
          <label class="text-muted mb-2"><i class="bi bi-envelope"></i> 邮件主题</label>
          <div class="p-3 bg-light rounded">
            <strong style="font-size: 1.1rem;">${preview.template_title || '(无主题)'}</strong>
          </div>
        </div>
        
        <div class="mb-3">
          <label class="text-muted mb-2"><i class="bi bi-file-text"></i> 邮件内容</label>
          <div class="p-3 bg-white border rounded" style="min-height: 250px; white-space: pre-wrap; line-height: 1.6;">
${preview.rendered_content || '(无内容)'}
          </div>
        </div>
        
        ${preview.variables_used && preview.variables_used.length > 0 ? `
          <div class="mt-3 p-2 bg-info bg-opacity-10 rounded">
            <small class="text-muted">
              <i class="bi bi-info-circle text-info"></i> 使用的变量: 
              ${preview.variables_used.map(v => `<code class="bg-white px-2 py-1 rounded">{{${v}}}</code>`).join(' ')}
            </small>
          </div>
        ` : ''}
      </div>
    </div>
  `;
  
  document.getElementById('previewContent').innerHTML = previewHTML;
  
  // 更新计数器
  document.getElementById('previewCounter').textContent = `${currentPreviewIndex + 1} / ${total}`;
  
  // 控制左右按钮显示
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');
  
  if (total > 1) {
    if (currentPreviewIndex === 0) {
      prevBtn.style.display = 'none';
      nextBtn.style.display = 'block';
    } else if (currentPreviewIndex === total - 1) {
      prevBtn.style.display = 'block';
      nextBtn.style.display = 'none';
    } else {
      prevBtn.style.display = 'block';
      nextBtn.style.display = 'block';
    }
  } else {
    prevBtn.style.display = 'none';
    nextBtn.style.display = 'none';
  }
  
  console.log(`📧 显示预览 ${currentPreviewIndex + 1}/${total}`);
}

// 上一个预览
function previousPreview() {
  if (currentPreviewIndex > 0) {
    currentPreviewIndex--;
    renderPreview();
  }
}

// 下一个预览
function nextPreview() {
  if (currentPreviewIndex < emailPreviews.length - 1) {
    currentPreviewIndex++;
    renderPreview();
  }
}

// 确认并发送（从预览模态框发送）
async function confirmAndSend() {
  console.log('✅ 点击确认发送（从预览）');
  console.log('📧 将发送邮件数:', emailPreviews.length);
  
  if (!emailPreviews || emailPreviews.length === 0) {
    showError('没有可发送的邮件');
    return;
  }
  
  // 显示确认模态框
  const uniqueEmails = new Set(selectedRecipients.map(r => r.email));
  const subject = document.getElementById('emailSubject').value;
  document.getElementById('confirmRecipientCount').textContent = `${uniqueEmails.size} 位收件人`;
  document.getElementById('confirmEmailSubject').textContent = subject;
  
  // 获取发件邮箱文本
  const senderSelect = document.getElementById('senderEmail');
  const senderText = senderSelect.options[senderSelect.selectedIndex].text;
  document.getElementById('confirmSenderEmail').textContent = senderText;
  
  // 先关闭预览模态框
  const previewModal = document.getElementById('emailPreviewModal');
  if (previewModal) {
    const modal = bootstrap.Modal.getInstance(previewModal);
    if (modal) {
      modal.hide();
    }
  }
  
  // 显示确认模态框，并标记为从预览发送
  window.sendFromPreview = true;
  const confirmModal = new bootstrap.Modal(document.getElementById('sendConfirmModal'));
  confirmModal.show();
}

// 发送邮件（显示确认对话框）
async function sendEmail() {
  console.log('✅ 点击发送邮件');
  
  if (selectedRecipients.length === 0) {
    showError('请先选择收件人');
    return;
  }
  
  const senderEmailId = document.getElementById('senderEmail').value;
  if (!senderEmailId) {
    showError('请选择发件邮箱');
    return;
  }
  
  const subject = document.getElementById('emailSubject').value;
  const content = document.getElementById('emailContent').value;
  
  if (!subject || !content) {
    showError('请填写邮件主题和内容');
    return;
  }
  
  // 显示确认模态框
  const uniqueEmails = new Set(selectedRecipients.map(r => r.email));
  document.getElementById('confirmRecipientCount').textContent = `${uniqueEmails.size} 位收件人`;
  document.getElementById('confirmEmailSubject').textContent = subject;
  
  // 获取发件邮箱文本
  const senderSelect = document.getElementById('senderEmail');
  const senderText = senderSelect.options[senderSelect.selectedIndex].text;
  document.getElementById('confirmSenderEmail').textContent = senderText;
  
  const confirmModal = new bootstrap.Modal(document.getElementById('sendConfirmModal'));
  confirmModal.show();
}

// 确认发送邮件（实际发送）
async function confirmSendEmail() {
  console.log('✅ 确认发送邮件');
  
  // 关闭确认模态框
  const confirmModal = bootstrap.Modal.getInstance(document.getElementById('sendConfirmModal'));
  if (confirmModal) {
    confirmModal.hide();
  }
  
  const senderEmailId = document.getElementById('senderEmail').value;
  const subject = document.getElementById('emailSubject').value;
  const content = document.getElementById('emailContent').value;
  
  try {
    showLoading();
    
    const token = localStorage.getItem('authToken');
    
    console.log('🔄 发送邮件...');
    console.log('收件人数量:', selectedRecipients.length);
    console.log('发件邮箱ID:', senderEmailId);
    
    // 分离联系人和客户ID（按邮箱去重）
    const uniqueEmails = new Set();
    const contactIds = [];
    const customerIds = [];
    
    selectedRecipients.forEach(r => {
      const email = r.email?.toLowerCase().trim();
      if (email && !uniqueEmails.has(email)) {
        uniqueEmails.add(email);
        if (r.type === 'contacts') {
          contactIds.push(r.id);
        } else if (r.type === 'customers') {
          customerIds.push(r.id);
        }
      }
    });
    
    console.log('📋 联系人ID:', contactIds);
    console.log('📋 客户ID:', customerIds);
    console.log('📧 唯一邮箱数:', uniqueEmails.size);
    
    // 构建请求体
    const requestBody = {
      sender_email_binding_id: parseInt(senderEmailId),
      contact_ids: contactIds,
      customer_ids: customerIds
    };
    
    // 如果选择了模板，添加template_id和模板内容
    if (currentTemplate) {
      requestBody.template_id = currentTemplate.id || currentTemplate;
      requestBody.template_title = subject;
      requestBody.template_content = content;
    } else {
      // 如果没有使用模板，直接传标题和内容
      requestBody.template_title = subject;
      requestBody.template_content = content;
    }
    
    console.log('📤 发送邮件请求:', requestBody);
    
    const response = await fetch('/api/emails/send-batch', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });
    
    const data = await response.json();
    console.log('📥 发送响应:', data);
    
    if (!data.success) {
      showError('发送失败: ' + (data.message || '未知错误'));
      hideLoading();
      return;
    }
    
    showSuccess(`邮件发送成功！已发送 ${data.total_sent} 封邮件`);
    
    // 如果是从预览发送的，清理预览模态框
    if (window.sendFromPreview) {
      const previewModal = document.getElementById('emailPreviewModal');
      if (previewModal) {
        const modal = bootstrap.Modal.getInstance(previewModal);
        if (modal) {
          modal.hide();
        }
        // 移除模态框DOM
        setTimeout(() => previewModal.remove(), 500);
      }
      window.sendFromPreview = false;
    }
    
    // 清空表单和收件人
    document.getElementById('emailSubject').value = '';
    document.getElementById('emailContent').value = '';
    selectedRecipients = [];
    currentTemplate = null;
    updateRecipientDisplay();
    
  } catch (error) {
    console.error('❌ 发送邮件失败:', error);
    showError('发送失败: ' + error.message);
  } finally {
    hideLoading();
  }
}

// 保存模板
async function saveTemplate() {
  const formData = {
    title: $('#emailSubject').val(),
    content: $('#emailContent').val()
  };
  
  if (!formData.title || !formData.content) {
    showToast('请填写完整信息', 'warning');
    return;
  }
  
  try {
    if (currentTemplate) {
      // 更新现有模板
      await axios.put(`/api/email-templates/${currentTemplate.id}`, formData);
      showToast('模板更新成功', 'success');
    } else {
      // 创建新模板
      await axios.post('/api/email-templates/', formData);
      showToast('模板创建成功', 'success');
    }
    
    $('#addTemplateModal').modal('hide');
    await loadTemplates();
  } catch (error) {
    showToast('保存失败', 'danger');
  }
}

// 编辑模板
function editTemplate(id) {
  const template = currentTemplates.find(t => t.id === id);
  if (template) {
    currentTemplate = template;
    $('#templateSelect').val(id);
    $('#emailSubject').val(template.title);
    $('#emailContent').val(template.content);
    
    // 切换模板时清空收件人选择
    selectedRecipients = [];
    updateRecipientDisplay();
    console.log('📧 已加载模板:', template.title, '- 收件人已清空');
    
    $('#addTemplateModal').modal('show');
  }
}

// 删除模板
async function deleteTemplate(id) {
  if (!confirm('确定要删除这个模板吗？')) return;
  
  try {
    await axios.delete(`/api/email-templates/${id}`);
    showToast('模板已删除', 'success');
    await loadTemplates();
  } catch (error) {
    showToast('删除失败', 'danger');
  }
}

// 显示模板预览
function showTemplatePreview() {
  showToast('模板预览功能开发中...', 'info');
}

// 工具函数
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('zh-CN');
}

function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

function showLoading() {
  // 先移除可能存在的旧遮罩
  hideLoading();
  
  console.log('🔄 显示加载中...');
  const loadingHTML = `
    <div class="loading-overlay" id="loadingOverlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 9999;">
      <div class="spinner-border text-light" role="status" style="width: 3rem; height: 3rem;">
        <span class="visually-hidden">加载中...</span>
      </div>
    </div>
  `;
  document.body.insertAdjacentHTML('beforeend', loadingHTML);
}

function hideLoading() {
  console.log('✅ 隐藏加载中');
  const loading = document.getElementById('loadingOverlay');
  if (loading) {
    loading.remove();
  }
}

// showToast 函数已在 main.js 中定义，这里不需要重复定义
// function showToast(message, type) {
//   console.log(`${type}: ${message}`);
//   showToast(message, 'info');
// }

// ==================== AI辅助功能（模板） ====================

// 启动动态省略号动画
function startLoadingDots() {
  let dotCount = 1;
  loadingDotsInterval = setInterval(() => {
    const dotsElement = document.querySelector('.loading-dots');
    if (dotsElement) {
      dotCount = (dotCount % 3) + 1;
      dotsElement.textContent = '.'.repeat(dotCount);
    }
  }, 500);
}

// 停止动态省略号动画
function stopLoadingDots() {
  if (loadingDotsInterval) {
    clearInterval(loadingDotsInterval);
    loadingDotsInterval = null;
  }
}

// AI生成模板
async function aiEnrichTemplate() {
  const title = document.getElementById('newTemplateTitle').value.trim();
  const content = document.getElementById('newTemplateContent').value.trim();
  
  if (!title && !content) {
    showWarning('请先输入模板标题或内容');
    return;
  }
  
  try {
    // 显示模态框和加载状态
    const modal = new bootstrap.Modal(document.getElementById('aiTemplatePreviewModal'));
    document.getElementById('aiTemplateModalTitle').innerHTML = '<i class="bi bi-stars"></i> AI智能生成';
    document.querySelector('#aiTemplatePreviewModal .modal-header').className = 'modal-header bg-gradient-primary text-white';
    document.getElementById('aiTemplateModalBody').innerHTML = `
      <div class="text-center p-5">
        <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;" role="status"></div>
        <p class="loading-text">AI分析中<span class="loading-dots">.</span></p>
        <small class="text-muted d-block mt-2">正在识别内容类型并生成邮件...</small>
      </div>
    `;
    document.getElementById('aiTemplateModalFooter').style.display = 'none';
    modal.show();
    
    // 启动省略号动画
    startLoadingDots();
    
    const token = localStorage.getItem('authToken');
    const response = await fetch('/api/emails/ai-assist', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        title,
        content,
        type: 'enrich'
      })
    });
    
    const data = await response.json();
    
    // 停止省略号动画
    stopLoadingDots();
    
    if (!data.success) {
      showError('AI生成失败: ' + data.message);
      modal.hide();
      return;
    }
    
    // 保存AI生成的结果
    aiGeneratedTemplateTitle = data.result.title;
    aiGeneratedTemplateContent = data.result.content;
    
    // 显示结果
    document.getElementById('aiTemplateModalBody').innerHTML = `
      <div class="alert alert-info mb-3">
        <i class="bi bi-info-circle"></i> 
        <strong>提示：</strong>AI已智能分析您的内容，${aiGeneratedTemplateTitle.includes('Re:') || aiGeneratedTemplateTitle.includes('回复') ? '生成了回复邮件' : '优化了邮件内容'}
      </div>
      <div class="mb-4">
        <div class="ai-preview-label">
          <i class="bi bi-envelope"></i> 生成的标题
        </div>
        <div class="ai-preview-content">${aiGeneratedTemplateTitle}</div>
      </div>
      <div class="mb-3">
        <div class="ai-preview-label">
          <i class="bi bi-file-text"></i> 生成的内容
        </div>
        <div class="ai-preview-content">${aiGeneratedTemplateContent}</div>
      </div>
    `;
    document.getElementById('aiTemplateModalFooter').style.display = 'flex';
    
  } catch (error) {
    console.error('AI生成失败:', error);
    stopLoadingDots();
    showError('AI生成失败: ' + error.message);
    bootstrap.Modal.getInstance(document.getElementById('aiTemplatePreviewModal'))?.hide();
  }
}

// 翻译模板
async function translateTemplate(targetLanguage = null) {
  const title = document.getElementById('newTemplateTitle').value.trim();
  const content = document.getElementById('newTemplateContent').value.trim();
  
  if (!title && !content) {
    showWarning('请先输入模板标题或内容');
    return;
  }
  
  try {
    // 显示模态框和加载状态
    const modal = new bootstrap.Modal(document.getElementById('aiTemplatePreviewModal'));
    document.getElementById('aiTemplateModalTitle').innerHTML = '<i class="bi bi-translate"></i> 翻译';
    document.querySelector('#aiTemplatePreviewModal .modal-header').className = 'modal-header bg-gradient-info text-white';
    document.getElementById('aiTemplateModalBody').innerHTML = `
      <div class="text-center p-5">
        <div class="spinner-border text-info mb-3" style="width: 3rem; height: 3rem;" role="status"></div>
        <p class="loading-text">翻译中<span class="loading-dots">.</span></p>
      </div>
    `;
    document.getElementById('aiTemplateModalFooter').style.display = 'none';
    modal.show();
    
    // 启动省略号动画
    startLoadingDots();
    
    const token = localStorage.getItem('authToken');
    const response = await fetch('/api/emails/ai-assist', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        title,
        content,
        type: 'translate',
        target_language: targetLanguage
      })
    });
    
    const data = await response.json();
    
    // 停止省略号动画
    stopLoadingDots();
    
    if (!data.success) {
      showError('翻译失败: ' + data.message);
      modal.hide();
      return;
    }
    
    // 保存翻译结果
    aiGeneratedTemplateTitle = data.result.title;
    aiGeneratedTemplateContent = data.result.content;
    
    // 显示结果
    const langInfo = data.result.detected_language && data.result.target_language 
      ? ` (${data.result.detected_language} → ${data.result.target_language})`
      : '';
    
    document.getElementById('aiTemplateModalTitle').innerHTML = `<i class="bi bi-translate"></i> 翻译结果${langInfo}`;
    document.getElementById('aiTemplateModalBody').innerHTML = `
      <div class="mb-4">
        <div class="ai-preview-label">
          <i class="bi bi-envelope"></i> 翻译后的标题
        </div>
        <div class="ai-preview-content">${aiGeneratedTemplateTitle}</div>
      </div>
      <div class="mb-3">
        <div class="ai-preview-label">
          <i class="bi bi-file-text"></i> 翻译后的内容
        </div>
        <div class="ai-preview-content">${aiGeneratedTemplateContent}</div>
      </div>
    `;
    document.getElementById('aiTemplateModalFooter').style.display = 'flex';
    
  } catch (error) {
    console.error('翻译失败:', error);
    stopLoadingDots();
    showError('翻译失败: ' + error.message);
    bootstrap.Modal.getInstance(document.getElementById('aiTemplatePreviewModal'))?.hide();
  }
}

// 应用AI生成的模板结果
function applyTemplateAIResult() {
  console.log('✅ 点击替换原内容按钮');
  console.log('标题:', aiGeneratedTemplateTitle);
  console.log('内容:', aiGeneratedTemplateContent);
  
  if (!aiGeneratedTemplateContent && !aiGeneratedTemplateTitle) {
    console.warn('⚠️ 没有可应用的内容');
    showWarning('没有可应用的内容');
    return;
  }
  
  // 获取表单元素
  const titleElement = document.getElementById('newTemplateTitle');
  const contentElement = document.getElementById('newTemplateContent');
  
  console.log('表单元素:', titleElement, contentElement);
  
  if (!titleElement || !contentElement) {
    console.error('❌ 找不到表单元素');
    showError('找不到表单元素，请刷新页面重试');
    return;
  }
  
  // 直接替换内容（不需要延迟）
  titleElement.value = aiGeneratedTemplateTitle || titleElement.value;
  contentElement.value = aiGeneratedTemplateContent || contentElement.value;
  
  console.log('✅ 内容已替换');
  
  // 显示成功提示
  showSuccess('模板内容已替换');
  
  // 关闭模态框
  const modal = bootstrap.Modal.getInstance(document.getElementById('aiTemplatePreviewModal'));
  if (modal) {
    console.log('✅ 关闭AI预览模态框');
    modal.hide();
  }
  
  // 清空数据
  aiGeneratedTemplateTitle = '';
  aiGeneratedTemplateContent = '';
  
  console.log('✅ 替换完成');
}

// ==================== Toast提示函数 ====================

function showSuccess(message) {
  showToast(message, 'success');
}

function showError(message) {
  showToast(message, 'error');
}

function showWarning(message) {
  showToast(message, 'warning');
}

function showInfo(message) {
  showToast(message, 'info');
}

function showToast(message, type = 'info') {
  // 创建toast元素
  const toastContainer = document.getElementById('toastContainer') || document.body;
  const toast = document.createElement('div');
  toast.className = `alert alert-${type === 'success' ? 'success' : type === 'error' ? 'danger' : type === 'warning' ? 'warning' : 'info'} position-fixed`;
  toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);';
  toast.innerHTML = `
    <div class="d-flex align-items-center">
      <i class="bi ${type === 'success' ? 'bi-check-circle' : type === 'error' ? 'bi-x-circle' : type === 'warning' ? 'bi-exclamation-triangle' : 'bi-info-circle'} me-2"></i>
      <span>${message}</span>
    </div>
  `;
  
  toastContainer.appendChild(toast);
  
  // 3秒后自动移除
  setTimeout(() => {
    toast.style.opacity = '0';
    toast.style.transition = 'opacity 0.5s';
    setTimeout(() => toast.remove(), 500);
  }, 3000);
}
</script>


