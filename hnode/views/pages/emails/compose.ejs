<!-- 写邮件页面 -->
<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="bi bi-envelope-plus"></i> 写邮件</h2>
  </div>

  <div class="row">
    <!-- 左侧：邮件编辑区 -->
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">邮件内容</h5>
        </div>
        <div class="card-body">
          <form id="composeForm">
            <!-- 收件人 -->
                  <div class="mb-3">
                    <label class="form-label">收件人</label>
                    <div class="input-group">
                      <input type="text" class="form-control" id="recipients" placeholder="请选择收件人" readonly style="cursor: pointer;" onclick="showSelectedRecipients()">
                      <button type="button" class="btn btn-outline-primary" onclick="selectRecipients()">
                        <i class="bi bi-pencil"></i> 选择收件人
                      </button>
                    </div>
                    <small class="text-muted">点击输入框查看已选择的收件人列表</small>
                  </div>

            <!-- 发件人邮箱 -->
            <div class="mb-3">
              <label class="form-label">发件人邮箱</label>
              <select class="form-select" id="senderEmail">
                <option value="">选择发件邮箱...</option>
              </select>
            </div>

            <!-- 邮件主题 -->
            <div class="mb-3">
              <label class="form-label">邮件主题</label>
              <input type="text" class="form-control" id="emailSubject" placeholder="请输入邮件主题">
            </div>

            <!-- 邮件内容 -->
            <div class="mb-3">
              <label class="form-label">邮件内容</label>
              <textarea class="form-control" id="emailContent" rows="15" placeholder="请输入邮件内容，可以使用个性化变量"></textarea>
            </div>

            <!-- 操作按钮 -->
            <div class="d-flex gap-2 justify-content-end">
              <button type="button" class="btn btn-secondary" onclick="saveDraft()">
                <i class="bi bi-floppy"></i> 保存草稿
              </button>
              <button type="button" class="btn btn-info" onclick="previewEmail()">
                <i class="bi bi-eye"></i> 预览
              </button>
              <button type="button" class="btn btn-primary" onclick="sendEmail()">
                <i class="bi bi-send"></i> 发送邮件
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- 右侧：工具栏 -->
    <div class="col-md-4">
      <!-- 邮件模板 -->
      <div class="card mb-3">
        <div class="card-header">
          <h6 class="mb-0"><i class="bi bi-file-text"></i> 邮件模板</h6>
        </div>
        <div class="card-body">
          <select class="form-select mb-2" id="templateSelect" onchange="loadTemplate()">
            <option value="">选择模板...</option>
          </select>
          <small class="text-muted">选择模板后将自动填充主题和内容</small>
        </div>
      </div>

      <!-- 个性化变量 -->
      <div class="card">
        <div class="card-header">
          <h6 class="mb-0"><i class="bi bi-code-square"></i> 个性化变量</h6>
        </div>
        <div class="card-body">
          <div class="d-grid gap-2">
            <button class="btn btn-outline-primary btn-sm" onclick="insertVariable('{{firstName}}')" title="插入收件人名字">
              <i class="bi bi-person"></i> {{firstName}}
            </button>
            <button class="btn btn-outline-primary btn-sm" onclick="insertVariable('{{lastName}}')" title="插入收件人姓氏">
              <i class="bi bi-person-badge"></i> {{lastName}}
            </button>
            <button class="btn btn-outline-primary btn-sm" onclick="insertVariable('{{company}}')" title="插入公司名称">
              <i class="bi bi-building"></i> {{company}}
            </button>
            <button class="btn btn-outline-primary btn-sm" onclick="insertVariable('{{position}}')" title="插入职位">
              <i class="bi bi-briefcase"></i> {{position}}
            </button>
          </div>
          <div class="mt-3 p-2 bg-light rounded">
            <small class="text-muted">
              <i class="bi bi-info-circle"></i> 点击按钮将变量插入到光标位置
            </small>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 选择收件人模态框 -->
<div class="modal fade" id="recipientSelectModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">选择收件人</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <input type="text" class="form-control" id="contactSearch" placeholder="搜索联系人...">
        </div>
        <div class="mb-3">
          <button class="btn btn-sm btn-outline-primary" onclick="selectAllContacts()">全选</button>
          <button class="btn btn-sm btn-outline-secondary" onclick="clearSelection()">清空</button>
        </div>
        <div id="contactList" style="max-height: 400px; overflow-y: auto;">
          <!-- 联系人列表 -->
        </div>
        <div class="mt-3">
          <span id="selectedContactsCount" class="text-muted">已选择 0 人</span>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
        <button type="button" class="btn btn-primary" onclick="confirmRecipients()">确定</button>
      </div>
    </div>
  </div>
</div>

<!-- 查看已选择收件人模态框 -->
<div class="modal fade" id="selectedRecipientsModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="bi bi-people"></i> 已选择的收件人 
          <span class="badge bg-primary ms-2" id="selectedRecipientsCountBadge">0</span>
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div id="selectedRecipientsList" style="max-height: 400px; overflow-y: auto;">
          <!-- 已选择的收件人列表 -->
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
        <button type="button" class="btn btn-primary" onclick="editRecipients()">
          <i class="bi bi-pencil"></i> 编辑收件人
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// 全局变量
let selectedRecipients = [];
let currentTemplate = null;
let emailPreviews = [];
let currentPreviewIndex = 0;

// 页面加载
document.addEventListener('DOMContentLoaded', async function() {
  console.log('✅ 写邮件页面已加载');
  
  // 初始化收件人显示
  updateRecipientDisplay();
  
  // 加载发件邮箱列表
  await loadSenderEmails();
  
  // 加载邮件模板列表
  await loadTemplateList();
  
  // 检查是否是回复邮件
  checkReplyMode();
});

// 检查回复模式
async function checkReplyMode() {
  const replyDataStr = sessionStorage.getItem('replyData');
  if (replyDataStr) {
    try {
      const replyData = JSON.parse(replyDataStr);
      console.log('📧 检测到回复模式:', replyData);
      
      // 填充主题（添加 Re: 前缀）
      const subject = replyData.originalSubject.startsWith('Re:') 
        ? replyData.originalSubject 
        : `Re: ${replyData.originalSubject}`;
      document.getElementById('emailSubject').value = subject;
      
      // 填充内容（引用原邮件）
      const originalDate = new Date(replyData.originalTime).toLocaleString('zh-CN');
      const quotedContent = `


------- 原始邮件 -------
发件人: ${replyData.originalSender}
发送时间: ${originalDate}
主题: ${replyData.originalSubject}

${replyData.originalContent}
`;
      
      document.getElementById('emailContent').value = quotedContent;
      
      // 将光标移到内容开头
      const textarea = document.getElementById('emailContent');
      textarea.setSelectionRange(0, 0);
      textarea.focus();
      
      // 自动查找并添加对应的联系人
      await autoSelectRecipientByEmail(replyData.replyTo);
      
      // 添加提示横幅
      const composeForm = document.getElementById('composeForm');
      if (composeForm && composeForm.parentElement) {
        const banner = document.createElement('div');
        banner.className = 'alert alert-info alert-dismissible fade show mb-3';
        banner.innerHTML = `
          <i class="bi bi-reply"></i> <strong>回复模式</strong>
          <p class="mb-0 small">正在回复来自 <strong>${replyData.replyTo}</strong> 的邮件</p>
          <p class="mb-0 small text-muted">${selectedRecipients.length > 0 ? '已自动选择收件人' : '请手动选择收件人'}</p>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        composeForm.parentElement.insertBefore(banner, composeForm);
      }
      
      // 清除 sessionStorage
      sessionStorage.removeItem('replyData');
      
    } catch (error) {
      console.error('❌ 解析回复数据失败:', error);
      sessionStorage.removeItem('replyData');
    }
  }
}

// 根据邮箱地址自动选择联系人
async function autoSelectRecipientByEmail(email) {
  try {
    console.log('🔍 自动查找联系人:', email);
    
    const token = localStorage.getItem('authToken');
    
    const response = await fetch('/api/contacts/?pageSize=100', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.success && data.contacts) {
      // 查找匹配的联系人
      const contact = data.contacts.find(c => c.email === email);
      
      if (contact) {
        console.log('✅ 找到匹配的联系人:', contact.name);
        selectedRecipients = [contact];
        updateRecipientDisplay();
      } else {
        console.log('⚠️ 未找到匹配的联系人，邮箱:', email);
        // 显示提示，让用户手动选择
        const recipientsInput = document.getElementById('recipients');
        if (recipientsInput) {
          recipientsInput.placeholder = `未找到联系人 (${email})，请手动选择`;
        }
      }
    }
    
  } catch (error) {
    console.error('❌ 自动选择联系人失败:', error);
  }
}

// 加载发件邮箱列表
async function loadSenderEmails() {
  try {
    const token = localStorage.getItem('authToken');
    
    const response = await fetch('/api/user-email-bindings/', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.success && data.bindings) {
      const select = document.getElementById('senderEmail');
      select.innerHTML = '<option value="">选择发件邮箱...</option>';
      
      data.bindings.forEach(binding => {
        const option = document.createElement('option');
        option.value = binding.id;
        option.textContent = `${binding.email_address}${binding.is_default ? ' (默认)' : ''}`;
        if (binding.is_default) {
          option.selected = true;
        }
        select.appendChild(option);
      });
    }
  } catch (error) {
    console.error('❌ 加载发件邮箱失败:', error);
  }
}

// 加载邮件模板列表
async function loadTemplateList() {
  try {
    const token = localStorage.getItem('authToken');
    
    const response = await fetch('/api/email-templates/?pageSize=100', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    
    if (data.success && data.templates) {
      window.allTemplates = data.templates;
      
      const select = document.getElementById('templateSelect');
      select.innerHTML = '<option value="">选择模板...</option>';
      
      data.templates.forEach(template => {
        const option = document.createElement('option');
        option.value = template.id;
        option.textContent = template.title;
        select.appendChild(option);
      });
    }
  } catch (error) {
    console.error('❌ 加载模板列表失败:', error);
  }
}

// 加载模板
function loadTemplate() {
  const templateId = document.getElementById('templateSelect').value;
  if (!templateId) {
    document.getElementById('emailSubject').value = '';
    document.getElementById('emailContent').value = '';
    currentTemplate = null;
    return;
  }
  
  const template = window.allTemplates.find(t => t.id == templateId);
  if (template) {
    document.getElementById('emailSubject').value = template.title;
    document.getElementById('emailContent').value = template.content;
    currentTemplate = template;
    console.log('✅ 已加载模板:', template.title);
  }
}

// 更新收件人显示
function updateRecipientDisplay() {
  const recipientsInput = document.getElementById('recipients');
  if (recipientsInput) {
    if (selectedRecipients.length === 0) {
      recipientsInput.value = '';
      recipientsInput.placeholder = '请选择收件人';
    } else {
      recipientsInput.value = `已选择 ${selectedRecipients.length} 位联系人`;
    }
  }
}

// 选择收件人
function selectRecipients() {
  console.log('✅ 选择收件人');
  const modal = new bootstrap.Modal(document.getElementById('recipientSelectModal'));
  modal.show();
  loadContactsForSelection();
}

// 加载联系人用于选择
async function loadContactsForSelection() {
  try {
    console.log('🔄 加载联系人列表...');
    
    const token = localStorage.getItem('authToken');
    
    const response = await fetch('/api/contacts/?pageSize=100', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    console.log('📥 联系人数据:', data);
    
    if (!data.success) {
      showError('加载联系人失败: ' + (data.message || '未知错误'));
      return;
    }
    
    const contacts = data.contacts || [];
    window.allContacts = contacts;
    
    let html = '';
    contacts.forEach(contact => {
      const isSelected = selectedRecipients.some(r => r.id === contact.id);
      html += `
        <div class="contact-item d-flex align-items-center p-2 border-bottom">
          <input type="checkbox" class="form-check-input me-3 recipient-checkbox" 
                 value="${contact.id}" 
                 data-contact-name="${contact.name}"
                 data-contact-email="${contact.email}"
                 data-contact-company="${contact.company || ''}"
                 ${isSelected ? 'checked' : ''} 
                 onchange="toggleRecipient(${contact.id}, this.checked)">
          <div class="flex-grow-1">
            <div class="fw-bold">${contact.name}</div>
            <small class="text-muted">${contact.email} • ${contact.company || '未知公司'}</small>
          </div>
        </div>
      `;
    });
    
    const contactList = document.getElementById('contactList');
    if (contactList) {
      contactList.innerHTML = html;
    }
    
    updateSelectedCount();
    
    console.log(`✅ 加载了 ${contacts.length} 个联系人`);
  } catch (error) {
    console.error('❌ 加载联系人失败:', error);
    showError('加载联系人失败: ' + error.message);
  }
}

// 切换收件人选择
function toggleRecipient(contactId, isSelected) {
  console.log('✅ 切换收件人:', contactId, isSelected);
  
  if (isSelected) {
    const contact = window.allContacts.find(c => c.id === contactId);
    if (contact && !selectedRecipients.some(r => r.id === contactId)) {
      selectedRecipients.push(contact);
      console.log('➕ 添加收件人:', contact.name);
    }
  } else {
    const beforeLength = selectedRecipients.length;
    selectedRecipients = selectedRecipients.filter(r => r.id !== contactId);
    console.log('➖ 移除收件人，数量从', beforeLength, '变为', selectedRecipients.length);
  }
  
  updateSelectedCount();
}

// 更新选中数量
function updateSelectedCount() {
  const count = selectedRecipients.length;
  const countElement = document.getElementById('selectedContactsCount');
  if (countElement) {
    countElement.textContent = `已选择 ${count} 人`;
  }
  console.log('📊 当前选中数量:', count);
}

// 全选联系人
function selectAllContacts() {
  const checkboxes = document.querySelectorAll('.recipient-checkbox');
  checkboxes.forEach(cb => {
    if (!cb.checked) {
      cb.checked = true;
      toggleRecipient(parseInt(cb.value), true);
    }
  });
}

// 清空选择
function clearSelection() {
  const checkboxes = document.querySelectorAll('.recipient-checkbox');
  checkboxes.forEach(cb => {
    cb.checked = false;
  });
  selectedRecipients = [];
  updateSelectedCount();
  updateRecipientDisplay();
}

// 确认收件人
function confirmRecipients() {
  console.log('✅ 确认收件人，共选择:', selectedRecipients.length);
  
  updateRecipientDisplay();
  
  const modal = bootstrap.Modal.getInstance(document.getElementById('recipientSelectModal'));
  if (modal) {
    modal.hide();
  }
  
  console.log('📋 选中的联系人列表:', selectedRecipients);
}

// 显示已选择的收件人列表
function showSelectedRecipients() {
  console.log('✅ 显示已选择的收件人列表');
  
  if (selectedRecipients.length === 0) {
    showError('尚未选择任何收件人\n\n请点击"选择收件人"按钮添加收件人');
    return;
  }
  
  // 更新徽章数量
  const countBadge = document.getElementById('selectedRecipientsCountBadge');
  if (countBadge) {
    countBadge.textContent = selectedRecipients.length;
  }
  
  // 渲染收件人列表
  const listContainer = document.getElementById('selectedRecipientsList');
  if (listContainer) {
    let html = '';
    
    if (selectedRecipients.length === 0) {
      html = '<div class="text-center text-muted p-4">尚未选择收件人</div>';
    } else {
      html = '<div class="list-group">';
      selectedRecipients.forEach((recipient, index) => {
        html += `
          <div class="list-group-item d-flex justify-content-between align-items-start">
            <div class="flex-grow-1">
              <div class="d-flex align-items-center">
                <i class="bi bi-person-circle text-primary me-2" style="font-size: 1.5rem;"></i>
                <div>
                  <div class="fw-bold">${recipient.name}</div>
                  <small class="text-muted">
                    <i class="bi bi-envelope"></i> ${recipient.email}
                  </small>
                  ${recipient.company ? `<br><small class="text-muted"><i class="bi bi-building"></i> ${recipient.company}</small>` : ''}
                </div>
              </div>
            </div>
            <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeRecipient(${index})" title="移除">
              <i class="bi bi-x-lg"></i>
            </button>
          </div>
        `;
      });
      html += '</div>';
    }
    
    listContainer.innerHTML = html;
  }
  
  // 显示模态框
  const modal = new bootstrap.Modal(document.getElementById('selectedRecipientsModal'));
  modal.show();
}

// 移除指定的收件人
function removeRecipient(index) {
  if (index >= 0 && index < selectedRecipients.length) {
    const removed = selectedRecipients.splice(index, 1)[0];
    console.log('➖ 移除收件人:', removed.name);
    
    // 更新收件人输入框显示
    updateRecipientDisplay();
    
    // 如果还有收件人，更新列表；否则关闭模态框
    if (selectedRecipients.length > 0) {
      // 更新徽章数量
      const countBadge = document.getElementById('selectedRecipientsCountBadge');
      if (countBadge) {
        countBadge.textContent = selectedRecipients.length;
      }
      
      // 重新渲染列表
      const listContainer = document.getElementById('selectedRecipientsList');
      if (listContainer) {
        let html = '<div class="list-group">';
        selectedRecipients.forEach((recipient, idx) => {
          html += `
            <div class="list-group-item d-flex justify-content-between align-items-start">
              <div class="flex-grow-1">
                <div class="d-flex align-items-center">
                  <i class="bi bi-person-circle text-primary me-2" style="font-size: 1.5rem;"></i>
                  <div>
                    <div class="fw-bold">${recipient.name}</div>
                    <small class="text-muted">
                      <i class="bi bi-envelope"></i> ${recipient.email}
                    </small>
                    ${recipient.company ? `<br><small class="text-muted"><i class="bi bi-building"></i> ${recipient.company}</small>` : ''}
                  </div>
                </div>
              </div>
              <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeRecipient(${idx})" title="移除">
                <i class="bi bi-x-lg"></i>
              </button>
            </div>
          `;
        });
        html += '</div>';
        listContainer.innerHTML = html;
      }
    } else {
      // 没有收件人了，关闭模态框
      console.log('📭 所有收件人已移除，关闭模态框');
      const modal = bootstrap.Modal.getInstance(document.getElementById('selectedRecipientsModal'));
      if (modal) {
        modal.hide();
      }
    }
  }
}

// 编辑收件人（关闭当前模态框，打开选择模态框）
function editRecipients() {
  // 关闭已选择收件人模态框
  const currentModal = bootstrap.Modal.getInstance(document.getElementById('selectedRecipientsModal'));
  if (currentModal) {
    currentModal.hide();
  }
  
  // 打开选择收件人模态框
  setTimeout(() => {
    selectRecipients();
  }, 300);
}

// 插入变量
function insertVariable(variable) {
  const textarea = document.getElementById('emailContent');
  if (!textarea) return;
  
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const content = textarea.value;
  
  textarea.value = content.substring(0, start) + variable + content.substring(end);
  textarea.selectionStart = textarea.selectionEnd = start + variable.length;
  textarea.focus();
  
  console.log('✅ 插入变量:', variable);
}

// 保存草稿
async function saveDraft() {
  showInfo('💡 草稿功能开发中...');
}

// 预览邮件
async function previewEmail() {
  console.log('✅ 点击预览');
  
  if (selectedRecipients.length === 0) {
    showError('请先选择收件人');
    return;
  }
  
  const subject = document.getElementById('emailSubject').value;
  const content = document.getElementById('emailContent').value;
  
  if (!subject || !content) {
    showError('请填写邮件主题和内容');
    return;
  }
  
  try {
    showLoading();
    
    const token = localStorage.getItem('authToken');
    
    console.log('🔄 调用邮件预览接口...');
    console.log('选中的收件人:', selectedRecipients);
    console.log('当前模板ID:', currentTemplate ? currentTemplate.id : null);
    
    const requestBody = {
      contact_ids: selectedRecipients.map(r => r.id),
      template_title: subject,
      template_content: content
    };
    
    if (currentTemplate) {
      requestBody.template_id = currentTemplate.id;
    }
    
    console.log('📤 请求体:', requestBody);
    
    const response = await fetch('/api/email-templates/batch-preview', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });
    
    const data = await response.json();
    console.log('📥 预览数据:', data);
    
    if (!data.success) {
      showError('预览失败: ' + (data.message || '未知错误'));
      hideLoading();
      return;
    }
    
    emailPreviews = data.previews || [];
    currentPreviewIndex = 0;
    
    console.log(`✅ 生成了 ${emailPreviews.length} 个预览`);
    
    showPreviewModal();
    
  } catch (error) {
    console.error('❌ 预览失败:', error);
    showError('预览失败: ' + error.message);
  } finally {
    hideLoading();
  }
}

// 显示预览模态框
function showPreviewModal() {
  if (emailPreviews.length === 0) {
    showWarning('没有可预览的内容');
    return;
  }
  
  let previewModal = document.getElementById('emailPreviewModal');
  if (!previewModal) {
    const modalHTML = `
      <div class="modal fade" id="emailPreviewModal" tabindex="-1">
        <div class="modal-dialog modal-lg" style="max-width: 700px;">
          <div class="modal-content" style="position: relative;">
            <div class="modal-header">
              <h5 class="modal-title">邮件预览</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" style="min-height: 500px; max-height: 70vh; overflow-y: auto; padding: 2rem;">
              <div id="previewContent"></div>
            </div>
            
            <button class="btn btn-primary rounded-circle preview-nav-btn" 
                    onclick="previousPreview()" 
                    id="prevBtn" 
                    style="display: none; position: absolute; left: -60px; top: 50%; transform: translateY(-50%); z-index: 1100; width: 45px; height: 45px; opacity: 0.9;">
              <i class="bi bi-chevron-left"></i>
            </button>
            
            <button class="btn btn-primary rounded-circle preview-nav-btn" 
                    onclick="nextPreview()" 
                    id="nextBtn" 
                    style="display: none; position: absolute; right: -60px; top: 50%; transform: translateY(-50%); z-index: 1100; width: 45px; height: 45px; opacity: 0.9;">
              <i class="bi bi-chevron-right"></i>
            </button>
            
            <div class="modal-footer">
              <div class="d-flex justify-content-between align-items-center w-100">
                <span id="previewCounter" class="text-muted">1 / 1</span>
                <div>
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                  <button type="button" class="btn btn-primary" onclick="confirmAndSend()">
                    <i class="bi bi-send"></i> 确认发送
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);
  }
  
  renderPreview();
  
  const modal = new bootstrap.Modal(document.getElementById('emailPreviewModal'));
  modal.show();
}

// 渲染预览内容
function renderPreview() {
  if (emailPreviews.length === 0) return;
  
  const preview = emailPreviews[currentPreviewIndex];
  const total = emailPreviews.length;
  
  const previewHTML = `
    <div class="email-preview-card">
      <div class="preview-header mb-4 p-3 bg-light rounded">
        <div class="mb-2">
          <strong class="text-primary">收件人：</strong> 
          <span>${preview.recipient_name || '未知'}</span>
        </div>
        <div>
          <strong class="text-primary">邮箱：</strong> 
          <span>${preview.recipient_email || '未知'}</span>
        </div>
      </div>
      
      <div class="preview-body">
        <div class="mb-4">
          <label class="text-muted mb-2"><i class="bi bi-envelope"></i> 邮件主题</label>
          <div class="p-3 bg-light rounded">
            <strong style="font-size: 1.1rem;">${preview.template_title || '(无主题)'}</strong>
          </div>
        </div>
        
        <div class="mb-3">
          <label class="text-muted mb-2"><i class="bi bi-file-text"></i> 邮件内容</label>
          <div class="p-3 bg-white border rounded" style="min-height: 250px; white-space: pre-wrap; line-height: 1.6;">
${preview.rendered_content || '(无内容)'}
          </div>
        </div>
        
        ${preview.variables_used && preview.variables_used.length > 0 ? `
          <div class="mt-3 p-2 bg-info bg-opacity-10 rounded">
            <small class="text-muted">
              <i class="bi bi-info-circle text-info"></i> 使用的变量: 
              ${preview.variables_used.map(v => `<code class="bg-white px-2 py-1 rounded">{{${v}}}</code>`).join(' ')}
            </small>
          </div>
        ` : ''}
      </div>
    </div>
  `;
  
  document.getElementById('previewContent').innerHTML = previewHTML;
  document.getElementById('previewCounter').textContent = `${currentPreviewIndex + 1} / ${total}`;
  
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');
  
  if (total > 1) {
    if (currentPreviewIndex === 0) {
      prevBtn.style.display = 'none';
      nextBtn.style.display = 'block';
    } else if (currentPreviewIndex === total - 1) {
      prevBtn.style.display = 'block';
      nextBtn.style.display = 'none';
    } else {
      prevBtn.style.display = 'block';
      nextBtn.style.display = 'block';
    }
  } else {
    prevBtn.style.display = 'none';
    nextBtn.style.display = 'none';
  }
  
  console.log(`📧 显示预览 ${currentPreviewIndex + 1}/${total}`);
}

// 上一个预览
function previousPreview() {
  if (currentPreviewIndex > 0) {
    currentPreviewIndex--;
    renderPreview();
  }
}

// 下一个预览
function nextPreview() {
  if (currentPreviewIndex < emailPreviews.length - 1) {
    currentPreviewIndex++;
    renderPreview();
  }
}

// 确认并发送
function confirmAndSend() {
  // 关闭预览模态框
  const previewModal = bootstrap.Modal.getInstance(document.getElementById('emailPreviewModal'));
  if (previewModal) {
    previewModal.hide();
  }
  
  sendEmail();
}

// 发送邮件
async function sendEmail() {
  console.log('✅ 点击发送邮件');
  
  if (selectedRecipients.length === 0) {
    showError('请先选择收件人');
    return;
  }
  
  const senderEmailId = document.getElementById('senderEmail').value;
  if (!senderEmailId) {
    showError('请选择发件邮箱');
    return;
  }
  
  const subject = document.getElementById('emailSubject').value;
  const content = document.getElementById('emailContent').value;
  
  if (!subject || !content) {
    showError('请填写邮件主题和内容');
    return;
  }
  
  if (!confirm(`确定要发送邮件给 ${selectedRecipients.length} 位收件人吗？`)) {
    return;
  }
  
  try {
    showLoading();
    
    const token = localStorage.getItem('authToken');
    
    console.log('🔄 发送邮件...');
    console.log('收件人数量:', selectedRecipients.length);
    console.log('发件邮箱ID:', senderEmailId);
    console.log('是否使用模板:', currentTemplate ? '是' : '否');
    
    // 构建请求体
    const requestBody = {
      sender_email_binding_id: parseInt(senderEmailId),
      contact_ids: selectedRecipients.map(r => r.id)
    };
    
    // 如果使用了模板
    if (currentTemplate) {
      requestBody.template_id = currentTemplate.id;
      console.log('使用模板ID:', currentTemplate.id);
    } else {
      // 没有使用模板，直接发送内容
      requestBody.template_title = subject;
      requestBody.template_content = content;
      console.log('直接发送内容（无模板）');
    }
    
    console.log('📤 请求体:', requestBody);
    
    const response = await fetch('/api/emails/send-batch', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });
    
    const data = await response.json();
    console.log('📥 发送结果:', data);
    
    if (!data.success) {
      showError('发送失败: ' + (data.message || '未知错误'));
      hideLoading();
      return;
    }
    
    showSuccess(`邮件发送成功！已发送 ${data.total_sent} 封邮件`);
    
    // 如果没有使用模板，询问是否保存为模板
    if (!currentTemplate) {
      const saveAsTemplate = confirm('是否将此邮件内容保存为模板？');
      if (saveAsTemplate) {
        await saveAsNewTemplate(subject, content);
      }
    }
    
    // 清空表单
    clearForm();
    
  } catch (error) {
    console.error('❌ 发送邮件失败:', error);
    showError('发送邮件失败: ' + error.message);
  } finally {
    hideLoading();
  }
}

// 保存为新模板
async function saveAsNewTemplate(title, content) {
  try {
    showLoading();
    
    const token = localStorage.getItem('authToken');
    
    console.log('🔄 保存为模板...');
    
    const response = await fetch('/api/email-templates/', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        title: title,
        content: content
      })
    });
    
    const data = await response.json();
    
    if (data.success) {
      showSuccess('已保存为模板！');
      // 重新加载模板列表
      await loadTemplateList();
    } else {
      showError('保存模板失败: ' + (data.message || '未知错误'));
    }
    
  } catch (error) {
    console.error('❌ 保存模板失败:', error);
    showError('保存模板失败: ' + error.message);
  } finally {
    hideLoading();
  }
}

// 清空表单
function clearForm() {
  document.getElementById('emailSubject').value = '';
  document.getElementById('emailContent').value = '';
  document.getElementById('templateSelect').value = '';
  selectedRecipients = [];
  currentTemplate = null;
  updateRecipientDisplay();
  
  console.log('✅ 表单已清空');
}

// 显示加载
function showLoading() {
  // 简单实现
  document.body.style.cursor = 'wait';
}

// 隐藏加载
function hideLoading() {
  document.body.style.cursor = 'default';
}
</script>

